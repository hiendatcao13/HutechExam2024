@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="min-width: 300px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudText>@((MarkupString)(ContentText ?? ""))</MudText>
        <MudTextField Label="Nhập mật khẩu" @bind-Value="inputText" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" @onkeyup="EnterAsync"></MudTextField>
        <MudSwitch @bind-Value="isRememberPass" Label="Lưu mật khẩu" Color="Color.Surface"></MudSwitch>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Thoát</MudButton>
        <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="SubmitAsync">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
</style>
@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    [Inject] 
    private Blazored.SessionStorage.ISessionStorageService SessionStorage { get; set; } = default!;

    [Parameter]
    public string? ContentText { get; set; }

    [Parameter]
    public string? ButtonText { get; set; }

    [Parameter]
    public string? PlainPassword { get; set; }

    [Parameter]
    public EventCallback? onHandleSubmit { get; set; }

    [Parameter]
    public EventCallback? onHandleCancel { get; set; }

    [Parameter] // ký hiệu nhận biết pass cho phần SessionStorage
    public string RecognizeCode { get; set; } = string.Empty;

    private string inputText = string.Empty;

    private bool isRememberPass = false;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    const string INVALID_PASSWORD = "Password không đúng. Vui lòng kiểm tra hoặc liên hệ quản trị viên";

    protected override async Task OnInitializedAsync()
    {
        inputText = await GetPasswordAsync() ?? string.Empty;
        await base.OnInitializedAsync();
    }
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
            StateHasChanged();
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
            StateHasChanged();
        }
    }

    private async Task EnterAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SubmitAsync();
        }
    }

    private async Task SubmitAsync()
    {
        if (!VerifyPassword())
        {
            Snackbar.Add(INVALID_PASSWORD, Severity.Error);
            return;
        }

        if (isRememberPass)
        {
            await SavePasswordAsync();
        }

        if (onHandleSubmit.HasValue)
        {
            await onHandleSubmit.Value.InvokeAsync();
        }
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private async Task Cancel()
    {
        if (onHandleCancel.HasValue)
        {
            await onHandleCancel.Value.InvokeAsync();
        }
        MudDialog?.Close(DialogResult.Cancel());
    }

    private bool VerifyPassword()
    {
        // không có mật khẩu
        if(string.IsNullOrWhiteSpace(PlainPassword))
        {
            return true;
        }

        // cố tình copy cho giống
        if (inputText == PlainPassword)
            return false;

        return BCrypt.Net.BCrypt.Verify(inputText, PlainPassword);
    }

    private async Task<string?> GetPasswordAsync()
    {
        return await SessionStorage.GetItemAsync<string>($"password{RecognizeCode}");
    }

    private async Task SavePasswordAsync()
    {
        await SessionStorage.SetItemAsync($"password{RecognizeCode}", inputText);
    }
}
