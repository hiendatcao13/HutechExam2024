@implements IDisposable

<MudText Typo="Typo.h5" Align="Align.Right" Style="color: #333; margin-right: 10%">
    ⏰: <b id="time-clock">@DisplayTime</b>
</MudText>

@code {
    [Parameter] public int InitialSeconds { get; set; }
    [Parameter] public EventCallback OnFinish { get; set; }

    private System.Timers.Timer? _timer;
    private string? DisplayTime { get; set; }
    private int RemainingSeconds;
    private bool _isInitialized = false;

    protected override async Task OnParametersSetAsync()
    {
        if (!_isInitialized && InitialSeconds > 0)
        {
            RemainingSeconds = InitialSeconds;
            DisplayTime = FormatTime(RemainingSeconds);
            StartTimer();
            _isInitialized = true;
        }

        await base.OnParametersSetAsync();
    }

    private void StartTimer()
    {
        _timer = new System.Timers.Timer
            {
                Interval = 1000,
                AutoReset = true,
                Enabled = true
            };

        _timer.Elapsed += async (s, e) =>
        {
            if (RemainingSeconds > 0)
            {
                RemainingSeconds--;
                DisplayTime = FormatTime(RemainingSeconds);
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                _timer?.Stop();
                await InvokeAsync(OnFinish.InvokeAsync);
            }
        };

        _timer.Start(); // <- Đừng quên dòng này
    }

    private string FormatTime(int totalSeconds)
    {
        TimeSpan time = TimeSpan.FromSeconds(totalSeconds);
        return $"{(int)time.TotalMinutes:D2}:{time.Seconds:D2}";
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}