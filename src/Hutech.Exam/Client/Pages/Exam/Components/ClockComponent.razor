@implements IDisposable

<MudText Typo="Typo.h5" Align="Align.Right" Style="color: #333; margin-right: 10%">
    ⏰: <b id="time-clock">@DisplayTime</b>
</MudText>

@code {
    [Parameter] public int InitialSeconds { get; set; }

    [Parameter] public EventCallback OnFinish { get; set; }

    private System.Timers.Timer? _timer;

    private string? DisplayTime { get; set; }

    private int RemainingSeconds;

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("tong_thoi_gian_nekkk" + InitialSeconds);
        RemainingSeconds = InitialSeconds;
        DisplayTime = FormatTime(RemainingSeconds);

        if (RemainingSeconds > 0)
        {
            StartTimer();
        }

        await base.OnParametersSetAsync();
    }

    private void StartTimer()
    {
        _timer = new System.Timers.Timer
			{
				Interval = 1000, // 1000 = 1ms
				AutoReset = true,
				Enabled = true
			};
        _timer.Elapsed += async (s, e) =>
        {
            if (RemainingSeconds > 0)
            {
                RemainingSeconds--;
                DisplayTime = FormatTime(RemainingSeconds);
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                _timer?.Stop();
                await InvokeAsync(OnFinish.InvokeAsync);
            }
        };
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private string FormatTime(int totalSeconds)
    {
		TimeSpan time = TimeSpan.FromSeconds(totalSeconds);
		return $"{(int)time.TotalMinutes:D2}:{time.Seconds:D2}";// format từ giây sang phút/giây với D2 là 2 số nguyên
	}

	

}