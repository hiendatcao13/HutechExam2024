@page "/test"
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@attribute [Authorize]

<PageTitle>Exam Page</PageTitle>


<MudPaper Elevation="4" Class="pa-4" Style="background-color: #f9f9f9;">
	<!-- Header Section -->
	<MudGrid AlignItems="Center" Justify="Justify.SpaceBetween" Class="mb-4" Style="position: sticky; top: 0">
		<MudItem xs="12" md="4">
			@*<MudImage Src="images/exam/Logo.svg" Width="150" />*@
		</MudItem>
		<MudItem xs="12" md="4" Class="d-flex justify-end">
		</MudItem>
		<MudItem xs="12" md="4" Class="d-flex justify-end">
			<MudText Typo="Typo.h5" Align=Align.Right Style="color: #333; margin-right: 10%">⏰: <b class="time-clock">@DisplayTime</b></MudText>
			<MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Large" OnClick="async () => await OnClickNopBai()">Nộp Bài</MudButton>
		</MudItem>
	</MudGrid>

	<MudGrid Class="noselect">
		<MudItem xs="12" md="9">
			<MudPaper Class="pa-4" Style="border: 1px solid #ccc;">
				@if (CustomDeThis != null)
				{
					int current_ma_nhom_cha = -1;
					int current_ma_nhom = 0;

					foreach (var item in CustomDeThis)
					{
						//Hiển thị nội dung câu hỏi nhóm cha cấp 1 - chương phần
						if (current_ma_nhom_cha != item.MaNhomCha && !string.IsNullOrEmpty(item.NoiDungCauHoiNhomCha))
						{
							current_ma_nhom_cha = item.MaNhomCha;
							<MudText Typo="Typo.h6" GutterBottom="true" Style="text-transform: uppercase" Class="nhomCauHoiCha">
								<NoiDungFragment NoiDung="@item.NoiDungCauHoiNhomCha.ToUpper()" isNoiDungCha="true" />
							</MudText>
						}

						//Hiển thị nội dung câu hỏi nhóm con cấp 2
						if (current_ma_nhom != item.MaNhom && !string.IsNullOrEmpty(item.NoiDungCauHoiNhom))
						{
							current_ma_nhom = item.MaNhom;

							// xử lí câu hỏi âm thanh
							if (item.KieuNoiDungCauHoiNhom == 2 && item.NoiDungCauHoiNhom.Contains("<audio") && item.GhiChu != "-1" && DsAudioListened.ContainsKey(item.MaNhom))
							{
								<MudText Typo="Typo.subtitle1" GutterBottom="true">
									<b><NoiDungFragment NoiDung="@DsAudioListened[item.MaNhom].AudioText" /></b>
								</MudText>
								<span>
									<br />
									<audio id="@item.MaNhom" controls controlsList="nodownload" @onplay="async () => await OnPlayAudio(item, item.MaNhom)">
										<source src="@DsAudioListened[item.MaNhom].AudioUrl" />
									</audio>
									@((MarkupString)(item.GhiChu + ""))
								</span>
							}
							else if (item.KieuNoiDungCauHoiNhom != 2)
							{
								<MudText Typo="Typo.subtitle1" GutterBottom="true">
									<b><NoiDungFragment NoiDung="@item.NoiDungCauHoiNhom" /></b>
								</MudText>
							}
						}

						//Hiển thị nội dung câu hỏi
						if (!string.IsNullOrEmpty(item.NoiDungCauHoi))
						{
							<MudText id=@($"question-{item.MaCauHoi}") Typo="Typo.body1" GutterBottom="true">
								<b>Câu hỏi @(item.ThuTuCauHoi): <NoiDungFragment NoiDung="@item.NoiDungCauHoi" /></b>
							</MudText>
						}

						// Hiển thị nội dung câu trả lời
						@if (item.CauTraLois != null)
						{
							<MudRadioGroup T="int?" Class="mt-2" Style="padding-bottom: 10px" Value="DSKhoanhDapAn[item.MaCauHoi].Item2" ValueChanged="async (value) => await OnClickDapAn(item, value)">
								@foreach (var noidung in item.CauTraLois)
								{
									<MudItem xs="12" sm="6">
										<MudRadio T="int?" Value="noidung.Key"><NoiDungFragment NoiDung="@noidung.Value"></NoiDungFragment></MudRadio>
									</MudItem>
								}
							</MudRadioGroup>
						}
					}
				}
			</MudPaper>
		</MudItem>

		<!-- Sidebar Info -->
		<MudItem xs="12" md="3">
			<MudPaper Class="pa-4" Style="text-align: center; border: 1px solid #ccc; margin-bottom: 15%;">
				<MudImage Src="images/exam/Ellipse 1.svg" Width="120" Class="mb-2" />
				<MudDivider Class="mb-2" />
				<MudText Typo="Typo.subtitle2"><b>Tên:</b> @SinhVien?.HoVaTenLot @SinhVien?.TenSinhVien</MudText>
				<MudText Typo="Typo.subtitle2"><b>Mã SV:</b> @SinhVien?.MaSoSinhVien</MudText>
				<MudText Typo="Typo.subtitle2"><b>Môn thi:</b> @CaThi?.MaChiTietDotThiNavigation?.MaLopAoNavigation.MaMonHocNavigation?.TenMonHoc</MudText>
				<MudText Typo="Typo.subtitle2"><b>Mã đề:</b> @ChiTietCaThi?.MaDeThi?.ToString("D3")</MudText>
			</MudPaper>
			<MudPaper Class="pa-4" Style="text-align: center; border: 1px solid #ccc; position: sticky; top: 10%; max-height: 500px; overflow-y: auto">
				<MudText Typo="Typo.subtitle2" Class="mb-2"><b>Danh sách câu hỏi</b></MudText>
				<MudGrid>
					@{
						foreach (var item in DSKhoanhDapAn)
						{
							<MudItem xs="2" md="3" Style="padding-left: 15px">
								<MudButton Size="Size.Small" Variant="Variant.Filled" Color="(item.Value.Item2 != null) ? Color.Success : Color.Default" OnClick="async () => await ScrollToQuestion(item.Key)">
									@item.Value.Item1
								</MudButton>
							</MudItem>
						}
					}
				</MudGrid>
			</MudPaper>
		</MudItem>
	</MudGrid>
</MudPaper>

<script src="js/exam.js" type="text/javascript"></script>

<style>
	.mud-main-content {
		padding: 0;
	}
	.nhomCauHoiCha {
		border: 1px solid;
		background-color: antiquewhite;
		border-radius: 5px;
		padding: 5px;
	}
	/*Chống bôi đen văn bản copy*/
	.noselect {
		-webkit-user-select: none; /* Safari */
		-moz-user-select: none; /* Firefox */
		-ms-user-select: none; /* IE10+/Edge */
		user-select: none; /* Standard */
	}
</style>

<script>
	window.focusWatcher = (function () {
		let visibilityChangeHandler;
		let blurHandler;
		let dotNetHelperRef;

		return {
			init: function (dotNetHelper) {
				dotNetHelperRef = dotNetHelper;

				visibilityChangeHandler = function () {
					if (document.hidden) {
						dotNetHelperRef.invokeMethodAsync('OnFocusLost');
					}
				};

				blurHandler = function () {
					dotNetHelperRef.invokeMethodAsync('OnFocusLost');
				};

				document.addEventListener('visibilitychange', visibilityChangeHandler);
				window.addEventListener('blur', blurHandler);
			},

			dispose: function () {
				if (visibilityChangeHandler) {
					document.removeEventListener('visibilitychange', visibilityChangeHandler);
				}
				if (blurHandler) {
					window.removeEventListener('blur', blurHandler);
				}
				if (dotNetHelperRef) {
					dotNetHelperRef.dispose();
				}

				// Dọn dẹp biến
				visibilityChangeHandler = null;
				blurHandler = null;
				dotNetHelperRef = null;
			}
		};
	})();

	// Lắng nghe mọi sự kiện audio đều phải phát từ đầu
	window.playAudioFromStart = (id) => {
		const audio = document.getElementById(id);
		if (audio) {
			audio.currentTime = 0;
			audio.play();
		}
	};

	// Đổi màu khi thời gian dưới 1 phút
	window.changeColorTime = () => {
		const clockElement = document.getElementById("time-clock");
		clockElement.style.color = "red";
		clockElement.style.fontWeight = 600;
	};

	window.scrollToElement = (elementId) => {
		const el = document.getElementById(elementId);
		if (el) {
			el.scrollIntoView({ behavior: "smooth", block: "start" });
		}
	};

	// Chặn copy văn bản
	window.antiCopy = {
		enable: function () {
			// Chặn chuột phải
			document.addEventListener('contextmenu', e => e.preventDefault());

			// Chặn tổ hợp phím Ctrl+C, Ctrl+U, PrintScreen...
			document.addEventListener('keydown', function (e) {
				if ((e.ctrlKey && ['c', 'u', 's', 'x'].includes(e.key.toLowerCase())) ||
					e.key === 'PrintScreen') {
					e.preventDefault();
				}
			});

			// Chặn copy
			document.addEventListener('copy', function (e) {
				e.preventDefault();
				alert("Không được phép sao chép nội dung!");
			});
		}
	};
</script>
