@using System.Text.Json
@using System.Text
@using Hutech.Exam.Client.API
@using Hutech.Exam.Client.Components.Dialogs
@using Hutech.Exam.Shared.DTO
@implements IDisposable
@inject ISnackbar Snackbar
@inject IDialogService Dialog
<MudDialog Style="min-width: 900px">
	<DialogContent>
		<MudGrid Style="font-size: 14px">
			<MudItem xs="3">
				<MudText>Thời gian hiện tại:</MudText>
				<MudText>Ngày thi:</MudText>
				<MudText>Trạng thái:</MudText>
			</MudItem>
			<MudItem xs="3">
				<MudText Class="content">@displayTime</MudText>
				<MudText Class="content">@tempExamSession?.ThoiGianBatDau</MudText>
				<MudText Class="content">@(status == 0 ? "Đã kích hoạt" : status == 1 ? "Dừng/chưa kích hoạt" : "Đã kết thúc")</MudText>
			</MudItem>
			<MudItem xs="2">
				<MudText>Ca thi:</MudText>
				<MudText>Thời lượng:</MudText>
				<MudText>@(tempExamSession.KetThuc ? "Giờ kết thúc" : tempExamSession.KichHoat ? "Giờ kích hoạt" : "Giờ hủy kích hoạt")</MudText>
			</MudItem>
			<MudItem xs="4" Style="font-weight: bold">
				<MudText Class="content">@tempExamSession?.TenCaThi</MudText>
				<MudText Class="content">@tempExamSession?.ThoiGianThi phút</MudText>
				<MudText Class="content">@(tempExamSession.KetThuc ? tempExamSession.ThoiDiemKetThuc : tempExamSession.ThoiGianKichHoat)</MudText>
			</MudItem>
		</MudGrid>
	</DialogContent>
	<DialogActions>
		<!--3 trạng thái: 0: đã kích hoạt - tiếp tục ca thi, 1: chưa kích hoạt / dừng ca thi, 2: kết thúc ca thi-->
		<MudButton Color="Color.Success" Disabled="@((status != 1))" Variant="Variant.Filled" OnClick="async () => { if (status == 1) await onClickActiveAsync(); }">Kích hoạt</MudButton>
		<MudButton Color="Color.Error" Disabled="@((status != 0))" Variant="Variant.Filled" OnClick="async () => { if (status == 0) await onClickInActiveAsync(); }">Hủy kích hoạt</MudButton>
		<MudButton Color="Color.Info" Disabled="@((status != 0))" Variant="Variant.Filled" OnClick="async () => { if (status == 0) await onClickPauseAsync(); }">Dừng ca thi</MudButton>
		<MudButton Color="Color.Warning" Disabled="@((status == 2))" Variant="Variant.Filled" OnClick="async () => { if (status != 2) await onClickFinishAsync(); }">Kết thúc ca thi</MudButton>
		<MudButton Color="Color.Default" Variant="Variant.Filled" OnClick="OnClickExit">Thoát</MudButton>
	</DialogActions>
</MudDialog>
<style>
	.my-custom-class {
		backdrop-filter: blur(10px);
	}

	.mud-dialog-actions {
		align-self: center
	}

	.mud-dialog .mud-dialog-title {
		border-bottom: 1.5px solid black;
		text-align: center;
	}

	.content {
		font-weight: bold;
		color: royalblue;
	}
</style>
@code {
	[CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

	[Parameter] public CaThiDto ExamSession { get; set; } = default!;

	[Inject] private HttpClient Http { get; set; } = default!;

	[Inject] private ISenderAPI SenderAPI { get; set; } = default!;

	private CaThiDto tempExamSession = default!;
	private System.Timers.Timer? timer { get; set; }
	private string? displayTime { get; set; }
	private int status { get; set; }

	private const string UPDATE_SUCCESS_TINHTRANGCATHI = "Cập nhật tình trạng ca thi thành công";
	private const string UPDATE_FAILED_TINHTRANGCATHI = "Cập nhật tình trạng ca thi không thành công. Vui lòng kiểm tra lại";

	private const string FAILED_KETTHUC_HUY = "Không thể kết thúc ca thi khi ca thi chưa được hủy kích hoạt hoặc dừng. Vui lòng chọn hủy kích hoạt hoặc dừng trước";
	private const string ALERT_KETTHUCCATHI = "Hệ thống sẽ mất ít thời gian để xóa toàn bộ dữ liệu";

	private const string CONFIRM_KICHHOATCATHI = "Bạn có muốn kích hoạt ca thi?";
	private const string CONFRIM_HUYKICHHOATCATHI = "Bạn có chắc chắn muốn hủy kích hoạt ca thi. Hệ thống sẽ hủy toàn bộ những ghi nhận phần bài làm mà tất cả sinh viên đã làm trong ca thi này nhưng điểm số vẫn giữ nguyên. Nếu bạn chỉ muốn dừng tạm thời ca thi, hãy chọn \"Dừng ca thi\"";
	private const string CONFRIM_KETTHUCCATHI = "Bạn có chắc chắn muốn kết thúc ca thi. Việc này sẽ không thể kích hoạt lại ca thi này nữa. Hãy hủy kích hoạt ca thi trước để làm sạch toàn bộ phần bài làm của sinh viên trước khi kết thúc";
	private const string CONFRIM_DUNGCATHI = "Bạn có chắc chắn muốn dừng ca thi. Việc này sẽ sẽ khiến toàn bộ sinh viên đang làm bài bị out ra tạm thời cho đến khi được kích hoạt trở lại";

	protected override void OnInitialized()
	{
		tempExamSession = new CaThiDto(ExamSession);
		UpdateStatus();
		HandleTime();
	}

	private async Task onClickActiveAsync()
	{
		await OnShowDialogConfirmAsync(CONFIRM_KICHHOATCATHI, "Kích hoạt", Color.Success, async () => await ActiveAPI(tempExamSession.MaCaThi));
	}

	private async Task onClickInActiveAsync()
	{
		await OnShowDialogConfirmAsync(CONFRIM_HUYKICHHOATCATHI, "Hủy kích hoạt", Color.Error, async () => await InActiveAPI(tempExamSession.MaCaThi));
	}

	private async Task onClickPauseAsync()
	{
		await OnShowDialogConfirmAsync(CONFRIM_DUNGCATHI, "Dừng", Color.Info, async () => await PauseAPI(tempExamSession.MaCaThi));
	}

	private async Task onClickFinishAsync()
	{
		await OnShowDialogConfirmAsync(CONFRIM_KETTHUCCATHI, "Kết thúc", Color.Dark, async () => await FinishAPI(tempExamSession.MaCaThi));
	}

	private void OnClickExit() => MudDialog?.Close(DialogResult.Ok(tempExamSession));

	private void HandleTime()
	{
		timer = new System.Timers.Timer();
		timer.Interval = 1000; // 1000 = 1ms
		timer.AutoReset = true;
		timer.Enabled = true;
		timer.Elapsed += (sender, e) =>
		{
			displayTime = DateTime.Now.ToString("hh:mm:ss tt");
			InvokeAsync(() =>
			{
				StateHasChanged();
			});
		};
	}

	private async Task OnShowDialogConfirmAsync(string message, string button_message, MudBlazor.Color color, Func<Task> callback)
	{
		var parameters = new DialogParameters<Simple_Dialog>
			{
				{ x => x.ContentText, message },
				{ x => x.ButtonText, button_message },
				{ x => x.Color, color },
				{ x => x.onHandleSubmit, EventCallback.Factory.Create(this, callback) }
			};
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };
		await Dialog.ShowAsync<Simple_Dialog>("Thay đổi tình trạng ca thi", parameters, options);
	}


	private void UpdateStatus()
	{
		status = tempExamSession.KetThuc ? 2 : tempExamSession.KichHoat ? 0 : 1;
	}

	private async Task ActiveAPI(int ma_ca_thi)
	{
		var response = await SenderAPI.PatchAsync<CaThiDto>($"api/cathis/{ma_ca_thi}/active", null);
		if (response.Success && response.Data != null)
		{
			tempExamSession = response.Data;
			UpdateStatus();
		}
	}

	private async Task InActiveAPI(int ma_ca_thi)
	{
		var response = await SenderAPI.PatchAsync<CaThiDto>($"api/cathis/{ma_ca_thi}/deactive", null);
		if (response.Success && response.Data != null)
		{
			tempExamSession = response.Data;
			UpdateStatus();
		}
	}

	private async Task PauseAPI(int ma_ca_thi)
	{
		var response = await SenderAPI.PatchAsync<CaThiDto>($"api/cathis/{ma_ca_thi}/pause", null);
		if (response.Success && response.Data != null)
		{
			tempExamSession = response.Data;
			UpdateStatus();
		}
	}

	private async Task FinishAPI(int ma_ca_thi)
	{
		if (tempExamSession.KichHoat)
		{
			Snackbar.Add(FAILED_KETTHUC_HUY, Severity.Error);
			return;
		}

		Snackbar.Add(ALERT_KETTHUCCATHI, Severity.Warning);

		var response = await SenderAPI.PatchAsync<CaThiDto>($"api/cathis/{ma_ca_thi}/finish", null);
		if (response.Success && response.Data != null)
		{
			tempExamSession = response.Data;
			UpdateStatus();
		}
	}

	public void Dispose()
	{
		if (timer != null)
			timer.Dispose();
	}

}