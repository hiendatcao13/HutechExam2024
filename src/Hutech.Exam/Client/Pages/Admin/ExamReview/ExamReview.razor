@page "/admin/test-review"
@using Hutech.Exam.Shared.DTO
@using Hutech.Exam.Shared.DTO.Custom
@using Syncfusion.Blazor.Charts
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@attribute [Authorize(Roles = "Admin,KhaoThi,DaoTao,CNTT")]

<PageTitle>Exam Evaluation</PageTitle>

<MudContainer Class="d-flex justify-center align-center">
	<MudGrid Style="margin-top: 5px; margin-left: 5px">
		<MudItem xs="12" md="6" lg="6">
			@if (subjects != null)
			{
				<MudTable Elevation="3" T="MonHocDto" Items="@subjects" Hover="true" Bordered="true" Dense="true" FixedHeader="true" Striped="true" OnRowClick="async (value) => await OnRowClickedSubject(value)" RowClass="cursor-pointer" RowClassFunc="SelectedRowClassSubjectFunc"
				TotalItems="totalRecords_Subject" RowsPerPage="rowsPerPage_Subject" CurrentPageChanged="OnCurrentPageChange_Subject" RowsPerPageChanged="OnRowsPerPageChange_Subject">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Thông tin môn thi</MudText>
						<MudSpacer />
					</ToolBarContent>
					<HeaderContent>
						<MudTh>ID</MudTh>
						<MudTh>Mã số</MudTh>
						<MudTh>Tên</MudTh>
					</HeaderContent>
					<RowTemplate Context="item">
						<MudTd DataLabel="ID">@item?.MaMonHoc</MudTd>
						<MudTd DataLabel="Mã số">@item?.MaSoMonHoc</MudTd>
						<MudTd DataLabel="Tên">@item?.TenMonHoc</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager PageSizeOptions="new int[] {20, 30, 60, 100}" AllItemsText="All" />
					</PagerContent>
				</MudTable>
			}
		</MudItem>

		<MudItem xs="12" md="6" lg="6">
			@if (exams != null)
			{
				<MudTable Elevation="3" T="DeThiDto" Items="@exams" Hover="true" Bordered="true" Dense="true" FixedHeader="true" Striped="true" OnRowClick="async (value) => await OnRowClickedExam(value)" RowClass="cursor-pointer" RowClassFunc="SelectedRowClassExamFunc"
				TotalItems="totalRecords_Exam" RowsPerPage="rowsPerPage_Exam" CurrentPageChanged="OnCurrentPageChange_Exam" RowsPerPageChanged="OnRowsPerPageChange_Exam">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Thông tin đề thi</MudText>
						<MudSpacer />
					</ToolBarContent>
					<HeaderContent>
						<MudTh>ID</MudTh>
						<MudTh>Tên</MudTh>
						<MudTh>Ngày tạo</MudTh>
					</HeaderContent>
					<RowTemplate Context="item">
						<MudTd DataLabel="ID">@item.MaDeThi</MudTd>
						<MudTd DataLabel="Tên">@item.TenDeThi</MudTd>
						<MudTd DataLabel="Ngày tạo">@(item.NgayTao.ToString("dd/MM/yyyy"))</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager PageSizeOptions="new int[] {20, 30, 60, 100}" AllItemsText="All" />
					</PagerContent>
				</MudTable>
			}
		</MudItem>

		<MudItem xs="12" md="12" lg="12">
			<SfChart Title="Thống kê mức độ câu hỏi" Width="1100px">
				<ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Mã câu hỏi - Mã CLO" LabelRotation="-90" />
				<ChartPrimaryYAxis Title="Số lượng thí sinh" />
				<ChartLegendSettings Visible="true" />
				<ChartTooltipSettings Enable="true" />
				<ChartSeriesCollection>
					<ChartSeries Type="ChartSeriesType.Column" DataSource="customQuestionReports" XName="MaCauHoiCLO" YName="TongSLSai" Name="Tổng SL trả lời sai" Fill="#90A4AE">
						<ChartMarker>
							<ChartDataLabel Visible="true" EnableRotation="true" Angle="-90"></ChartDataLabel>
						</ChartMarker>
					</ChartSeries>

					<ChartSeries Type="ChartSeriesType.Column" DataSource="customQuestionReports" XName="MaCauHoiCLO" YName="TongSLDung" Name="Tổng SL trả lời đúng" Fill="#FFA726">
						<ChartMarker>
							<ChartDataLabel Visible="true" EnableRotation="true" Angle="-90"></ChartDataLabel>
						</ChartMarker>
					</ChartSeries>

					<ChartSeries Type="ChartSeriesType.Line" DataSource="customQuestionReports" XName="MaCauHoiCLO" YName="PhanTram" Fill="red" Width="3" Name="(%) tỉ lệ đúng">
						<ChartMarker>
							<ChartDataLabel Visible="true" Fill="red"></ChartDataLabel>
						</ChartMarker>
					</ChartSeries>
				</ChartSeriesCollection>
			</SfChart>
		</MudItem>

		<MudItem xs="12">
			@if (customQuestionReports != null)
			{
				<MudTable Elevation="24" T="CustomThongKeCauHoi" Items="@customQuestionReports" Hover="true" Bordered="true" Dense="true" FixedHeader="true" Striped="true">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Bảng tần số câu hỏi</MudText>
						<MudSpacer />
						<MudButton Class="add-button" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Download" OnClick="async () => await OnClickDownload()">Download JSON thống kê</MudButton>
						<MudSwitch Label="Hiển thị cấp bậc SV (27%)" T="bool" Value="isShowLevelStudent" ValueChanged="async (value) => await OnValueChangeShowStudentLevel(value)" Color="Color.Success"></MudSwitch>
					</ToolBarContent>
					<HeaderContent>
						<MudTh>Mã câu hỏi</MudTh>
						<MudTh>Mã số CLO</MudTh>
						<MudTh>SL Đúng</MudTh>
						<MudTh>SL Sai</MudTh>
						@if(isShowLevelStudent)
						{
							<MudTh>(%) SVTop đúng</MudTh>
							<MudTh>(%) SVBottom đúng</MudTh>
						}
						<MudTh>Tổng SL</MudTh>
						<MudTh>Tỉ lệ (%)</MudTh>
					</HeaderContent>
					<RowTemplate Context="item">
						<MudTd DataLabel="Mã câu hỏi">@item.MaCauHoi</MudTd>
						<MudTd DataLabel="Mã câu hỏi">@item.MaSoCLO</MudTd>
						<MudTd DataLabel="SL Đúng">@item.TongSLDung</MudTd>
						<MudTd DataLabel="SL Sai">@item.TongSLSai</MudTd>
						@if(isShowLevelStudent && item.CustomThongKeCapBacCauHoi != null)
						{
							double phanTramSVTop = (item.CustomThongKeCapBacCauHoi.TongSVTop == 0) ? 0 : (float)item.CustomThongKeCapBacCauHoi.TongSVTopDung / item.CustomThongKeCapBacCauHoi.TongSVTop;
							double phanTramSVBottom = (item.CustomThongKeCapBacCauHoi.TongSVBottom == 0) ? 0 : (float)item.CustomThongKeCapBacCauHoi.TongSVBottomDung / item.CustomThongKeCapBacCauHoi.TongSVBottom;
							<MudTd DataLabel="(%) SVTop đúng" Style="@GetColorStyle(phanTramSVTop)">@phanTramSVTop</MudTd>
							<MudTd DataLabel="(%) SVBottom đúng" Style="@GetColorStyle(phanTramSVBottom)">@phanTramSVBottom</MudTd>
						}
						<MudTd DataLabel="Tổng SL">@item.TongSLTraLoi</MudTd>
						<MudTd DataLabel="Tỉ lệ (%)" Style=@GetColorStyle(item.PhanTramDung)>@item.PhanTramDung</MudTd>
					</RowTemplate>
				</MudTable>
			}
		</MudItem>

		<MudItem xs="3">
			<MudPaper Class="box-text" Style="transform: scale(0.8)">
				<MudText Typo="Typo.h5" Align="Align.Center">Tổng số thí sinh</MudText>
				<MudText Typo="Typo.h3" Align="Align.Center">@totalStudent.ToString("N0", new System.Globalization.CultureInfo("vi-VN"))</MudText>
			</MudPaper>
		</MudItem>

		<MudItem xs="3">
			<MudPaper Class="box-text" Style="transform: scale(0.8)">
				<MudText Typo="Typo.h5" Align="Align.Center">Điểm trung bình</MudText>
				<MudText Typo="Typo.h3" Align="Align.Center">@averageScore.ToString("0.00")</MudText>
			</MudPaper>
		</MudItem>

		<MudItem xs="3">
			<MudPaper Class="box-text" Style="transform: scale(0.8)">
				<MudText Typo="Typo.h5" Align="Align.Center">Điểm &lt;= 1</MudText>
				<MudText Typo="Typo.h3" Align="Align.Center">@totalStudentLessEqual1</MudText>
			</MudPaper>
		</MudItem>

		<MudItem xs="3">
			<MudPaper Class="box-text" Style="transform: scale(0.8)">
				<MudText Typo="Typo.h5" Align="Align.Center">Điểm &lt; 5</MudText>
				<MudText Typo="Typo.h3" Align="Align.Center">@totalStudentLess5</MudText>
			</MudPaper>
		</MudItem>

		<MudItem xs="12">
			<SfChart Title="Phổ điểm thi" Width="1100px">
				<ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Điểm" LabelRotation="-90" />
				<ChartPrimaryYAxis Title="Số lượng thí sinh" />
				<ChartLegendSettings Visible="true" />
				<ChartTooltipSettings Enable="true" />
				<ChartSeriesCollection>
					<ChartSeries Type="ChartSeriesType.Column" DataSource="customScoreReports" XName="Diem" YName="SoLuong" Name="Điểm" Fill="#64B5F6">
						<ChartMarker>
							<ChartDataLabel Visible="true" EnableRotation="true" Angle="-90"></ChartDataLabel>
						</ChartMarker>
					</ChartSeries>
				</ChartSeriesCollection>

			</SfChart>
		</MudItem>

		<MudItem xs="12">
			@if (customScoreReports != null)
			{
				<MudTable Elevation="24" T="CustomThongKeDiem" Items="@customScoreReports" Hover="true" Bordered="true" Dense="true" FixedHeader="true" Striped="true">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Bảng tần số điểm</MudText>
						<MudSpacer />
					</ToolBarContent>
					<HeaderContent>
						<MudTh>Điểm</MudTh>
						<MudTh>Số lượng</MudTh>
					</HeaderContent>
					<RowTemplate Context="item">
						<MudTd DataLabel="ID">@item.Diem</MudTd>
						<MudTd DataLabel="Mã số">@item.SoLuong</MudTd>
					</RowTemplate>
				</MudTable>
			}
		</MudItem>

	</MudGrid>
</MudContainer>

<style>
	.add-button {
	transform: scale(0.85);
	}

	.final-table-button {
	margin-top: 1%;
	}

	.checkbox {
	transform: scale(0.85);
	}

	.selected-row {
	background-color: lightgray !important;
	}
</style>

<script>
	window.downloadFileFromText = function (fileName, textContent) {
		const blob = new Blob([textContent], { type: 'application/json' });
		const link = document.createElement('a');
		link.href = URL.createObjectURL(blob);
		link.download = fileName;
		link.click();
		URL.revokeObjectURL(link.href);
	};
</script>

@code {
	string GetColorStyle(double phanTram) =>
		phanTram < 0.5 ? "color:red" : "color:black";

	// thông số cho bảng môn thi
	private int currentPage_Subject = 0;
	private int rowsPerPage_Subject = 20;
	private int totalRecords_Subject = 20;
	private int totalPages_Subject = 1;

	// thông số cho bảng đề thi
	private int currentPage_Exam = 0;
	private int rowsPerPage_Exam = 20;
	private int totalRecords_Exam = 20;
	private int totalPages_Exam = 1;

	private List<int> selectedPages_Subject = new() { 0 }; // luôn load có trang đầu tiên
	private List<int> selectedPages_Exam = new() { 0 }; // luôn load có trang đầu tiên

	private bool isShowLevelStudent = false;


	private async Task OnRowsPerPageChange_Subject(int rows)
	{
		if (rows == rowsPerPage_Subject)
			return;

		this.rowsPerPage_Subject = rows;
		currentPage_Subject = 0; //Reset về trang đầu tiên

		(var newMons, _, _) = await Subjects_GetAll_PagedAPI(currentPage_Subject, rowsPerPage_Subject);
		PadEmptyRows(newMons);
	}
	private async Task OnCurrentPageChange_Subject(int page)
	{
		if (page == currentPage_Subject)
			return;

		this.currentPage_Subject = page;
		if (selectedPages_Subject.Contains(page))
			return;

		//chỉ thực hiện load data khi người dùng chọn trang mới
		(var newMons, _, _) = await Subjects_GetAll_PagedAPI(currentPage_Subject, rowsPerPage_Subject);
		PadEmptyRows(newMons);
		selectedPages_Subject?.Add(currentPage_Subject);
	}

	private async Task OnRowsPerPageChange_Exam(int rows)
	{
		if (rows == rowsPerPage_Exam)
			return;

		this.rowsPerPage_Exam = rows;
		currentPage_Exam = 0; //Reset về trang đầu tiên

		(var newDeThis, _, _) = await Exams_SelectBy_SubjectId_PagedAPI(selectedSubject?.MaMonHoc ?? -1, currentPage_Exam, rowsPerPage_Exam);
		PadEmptyRows(newDeThis);
	}
	private async Task OnCurrentPageChange_Exam(int page)
	{
		if (page == currentPage_Exam)
			return;

		this.currentPage_Exam = page;
		if (selectedPages_Exam.Contains(page))
			return;

		//chỉ thực hiện load data khi người dùng chọn trang mới
		(var newDeThis, _, _) = await Exams_SelectBy_SubjectId_PagedAPI(selectedSubject?.MaMonHoc ?? -1, currentPage_Exam, rowsPerPage_Exam);
		PadEmptyRows(newDeThis);
		selectedPages_Exam?.Add(currentPage_Exam);
	}

	private async Task OnRowClickedSubject(TableRowClickEventArgs<MonHocDto> args)
	{
		if (args.Item == selectedSubject)
			return;

		selectedSubject = args.Item;

		exams?.Clear();
		customQuestionReports.Clear();
		customScoreReports.Clear();
		isFirstRenderLevelReport = true;
		totalStudent = totalStudentLessEqual1 = totalStudentLess5 = 0;
		averageScore = 0;

		await FetchExamAsync();
	}

	private async Task OnRowClickedExam(TableRowClickEventArgs<DeThiDto> args)
	{
		if (args.Item == selectedExam)
			return;

		selectedExam = args.Item;

		if (selectedExam == null)
			return;

		customQuestionReports = await QuestionReport_SelectBy_ExamAPI(selectedExam.MaDeThi);
		isFirstRenderLevelReport = true;

		await ReportScoreAsync(selectedExam.MaDeThi);
	}

	private async Task OnValueChangeShowStudentLevel(bool value)
	{
		isShowLevelStudent = value;

		if(value && isFirstRenderLevelReport)
		{
			await FetchLevelStudentReportAsync();
			isFirstRenderLevelReport = false;
		}
	}


	private string SelectedRowClassSubjectFunc(MonHocDto item, int rowNumber)
	{
		return item == selectedSubject ? "selected-row" : string.Empty;
	}

	private string SelectedRowClassExamFunc(DeThiDto item, int rowNumber)
	{
		return item == selectedExam ? "selected-row" : string.Empty;
	}
}