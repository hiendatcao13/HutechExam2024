@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Custom
@using Hutech.Exam.Shared.DTO.Request.Khoa
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 450px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs="4" Style="align-content: center"><MudText>Tên khoa:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Tên khoa" Required @bind-Value="@tempKhoa.TenKhoa" InputType="InputType.Text"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Ngày thành lập:</MudText></MudItem>
            <MudItem xs="8">
                <MudDatePicker Editable="true" Label="Ngày thành lập" @bind-Date="@tempKhoa.NgayThanhLap" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Dialog" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if (!IsEdit)
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Success">Thêm</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickSua()" Color="Color.Success">Sửa</MudButton>
        }

    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }

    .title-text{
    font-weight: bold;
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter][EditorRequired] public bool IsEdit { get; set; } = false;

    [Parameter] public KhoaDto? Khoa { get; set; } = default!;

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    private KhoaDto tempKhoa { get; set; } = default!;

    private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";


    protected override async Task OnInitializedAsync()
    {
        HandleInput();
        await base.OnInitializedAsync();
    }

    private void HandleInput()
    {
        if(IsEdit && Khoa != null)
        {
            tempKhoa = new KhoaDto(Khoa);
            return;
        }
        tempKhoa = new();
    }

    private bool CheckValidForm()
    {
        return !string.IsNullOrWhiteSpace(tempKhoa.TenKhoa) && tempKhoa.NgayThanhLap != default;
    }


    private void OnClickThoat()
    {
        MudDialog?.Cancel();
    }

    private async Task OnClickThem()
    {
        if(!CheckValidForm())
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
        }
        var result = await InsertAPI(new KhoaCreateRequest
			{
				TenKhoa = tempKhoa.TenKhoa ?? string.Empty,
				NgayThanhLap = tempKhoa.NgayThanhLap ?? DateTime.Now
			});
        if(result != null && result.MaKhoa != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }

    private async Task OnClickSua()
    {
        if (!CheckValidForm())
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
        }
        var result = await UpdateAPI(tempKhoa.MaKhoa, new KhoaUpdateRequest
            {
                TenKhoa = tempKhoa.TenKhoa ?? string.Empty,
                NgayThanhLap = tempKhoa.NgayThanhLap ?? DateTime.Now
            });
        if (result != null && result.MaKhoa != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }

    private async Task<KhoaDto?> InsertAPI(KhoaCreateRequest khoa)
    {
        var response = await SenderAPI.PostAsync<KhoaDto>("api/khoas", khoa);
        return (response.Success) ? response.Data : null;
    }

    private async Task<KhoaDto?> UpdateAPI(int id, KhoaUpdateRequest khoa)
    {
        var response = await SenderAPI.PutAsync<KhoaDto>($"api/khoas/{id}", khoa);
        return (response.Success) ? response.Data : null;
    }
}