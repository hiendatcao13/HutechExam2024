@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Custom
@using Hutech.Exam.Shared.DTO.Request.SinhVien
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 450px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs="4"><MudText>Tên lớp:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@Lop?.TenLop</span></MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>MSSV:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="MSSV" Required @bind-Value="@tempSinhVien.MaSoSinhVien" InputType="InputType.Text"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Họ lót:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Họ lót" @bind-Value="@tempSinhVien.HoVaTenLot" InputType="InputType.Text"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Tên:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Tên" Required @bind-Value="@tempSinhVien.TenSinhVien" InputType="InputType.Text"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Giới tính:</MudText></MudItem>
            <MudItem xs="8"><MudCheckBox @bind-Value="@isMale">Nam</MudCheckBox></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Ngày sinh:</MudText></MudItem>
            <MudItem xs="8">
                <MudDatePicker Editable="true" Required Label="Ngày sinh" @bind-Date="@tempSinhVien.NgaySinh" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Dialog" />
            </MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Email:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Email" @bind-Value="@tempSinhVien.Email" InputType="InputType.Text"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Địa chỉ:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Địa chỉ" @bind-Value="@tempSinhVien.DiaChi" InputType="InputType.Text"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Điện thoại:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Điện thoại" @bind-Value="@tempSinhVien.DienThoai" InputType="InputType.Text"></MudTextField></MudItem>


        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if (!IsEdit)
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Success">Thêm</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickSua()" Color="Color.Success">Sửa</MudButton>
        }

    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }

    .title-text {
    font-weight: bold;
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter][EditorRequired] public bool IsEdit { get; set; } = false;

    [Parameter][EditorRequired] public LopDto? Lop { get; set; } = default!;

    [Parameter] public SinhVienDto? SinhVien { get; set; } = default!;

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    private SinhVienDto tempSinhVien { get; set; } = default!;

    private const string INVALID_FORM = "Vui lòng phải nhập ít nhất mssv, tên thí sinh và ngày sinh";

    private bool isMale = false;


    protected override async Task OnInitializedAsync()
    {
        HandleInput();
        await base.OnInitializedAsync();
    }

    private void HandleInput()
    {
        if (IsEdit && SinhVien != null)
        {
            tempSinhVien = new SinhVienDto(SinhVien);
			isMale = (tempSinhVien.GioiTinh == 1) ? true : false;
            return;
        }
        tempSinhVien = new();
    }

    private bool CheckValidForm()
    {
        return !string.IsNullOrWhiteSpace(tempSinhVien.MaSoSinhVien) && !string.IsNullOrWhiteSpace(tempSinhVien.TenSinhVien) && tempSinhVien.NgaySinh != null;
    }


    private void OnClickThoat()
    {
        MudDialog?.Cancel();
    }

    private async Task OnClickThem()
    {
        if (!CheckValidForm())
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
        }
		var result = await InsertAPI(new SinhVienCreateRequest
			{
				MaSoSinhVien = tempSinhVien.MaSoSinhVien ?? string.Empty,
				HoVaTenLot = tempSinhVien.HoVaTenLot ?? string.Empty,
				TenSinhVien = tempSinhVien.TenSinhVien ?? string.Empty,
				GioiTinh = (short)((isMale) ? 1 : 0),
				NgaySinh = tempSinhVien.NgaySinh ?? DateTime.Now,
				Email = tempSinhVien.Email ?? string.Empty,
				DiaChi = tempSinhVien.DiaChi ?? string.Empty,
				DienThoai = tempSinhVien.DienThoai ?? string.Empty,
				MaLop = Lop?.MaLop ?? -1
			});

        if (result != null && result.MaSinhVien != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }

    private async Task OnClickSua()
    {
        if (!CheckValidForm())
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
        }
		var result = await UpdateAPI(tempSinhVien.MaSinhVien, new SinhVienUpdateRequest
			{
				MaSoSinhVien = tempSinhVien.MaSoSinhVien ?? string.Empty,
				HoVaTenLot = tempSinhVien.HoVaTenLot ?? string.Empty,
				TenSinhVien = tempSinhVien.TenSinhVien ?? string.Empty,
                GioiTinh = (short)((isMale) ? 1 : 0),
				NgaySinh = tempSinhVien.NgaySinh ?? DateTime.Now,
				Email = tempSinhVien.Email ?? string.Empty,
				DiaChi = tempSinhVien.DiaChi ?? string.Empty,
				DienThoai = tempSinhVien.DienThoai ?? string.Empty,
                MaLop = Lop?.MaLop ?? -1
            });
        if (result != null && result.MaSinhVien != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }

    private async Task<SinhVienDto?> InsertAPI(SinhVienCreateRequest sinhVien)
    {
        var response = await SenderAPI.PostAsync<SinhVienDto>("api/sinhviens", sinhVien);
        return (response.Success) ? response.Data : null;
    }

    private async Task<SinhVienDto?> UpdateAPI(long id, SinhVienUpdateRequest sinhVien)
    {
        var response = await SenderAPI.PutAsync<SinhVienDto>($"api/sinhviens/{id}", sinhVien);
        return (response.Success) ? response.Data : null;
    }
}