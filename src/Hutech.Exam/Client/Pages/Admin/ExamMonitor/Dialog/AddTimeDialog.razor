@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using Hutech.Exam.Shared.DTO.Request.ChiTietCaThi
@using Hutech.Exam.Shared.Enums
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 400px; max-height: auto; overflow: visible">
	<DialogContent>
		<MudGrid>
			<MudItem xs="4"><MudText>Tên thí sinh:</MudText></MudItem>
			<MudItem xs="8"><MudText><strong>@ChiTietCaThi.MaSinhVienNavigation?.HoVaTenLot @ChiTietCaThi.MaSinhVienNavigation?.TenSinhVien</strong></MudText></MudItem>

			<MudItem xs="4" Style="align-content: center"><MudText>Thời gian cộng (phút):</MudText></MudItem>
			<MudItem xs="8"> <MudTextField Label="Thời gian cộng (phút)" Required InputType="InputType.Number" @bind-Value="tempChiTietCaThi.GioCongThem" Variant="Variant.Outlined" /></MudItem>

			<MudItem xs="4" Style="align-content: center"><MudText>Lý do cộng:</MudText></MudItem>
			<MudItem xs="8"> <MudTextField Label="Lý do cộng" Required Placeholder="treo máy" InputType="InputType.Text" @bind-Value="lyDoCong" Variant="Variant.Outlined" /></MudItem>
		</MudGrid>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Outlined" OnClick="OnClickExit" Color="Color.Default">Cancel</MudButton>
		<MudButton Variant="Variant.Outlined" OnClick="async () => await OnClickSaveAsync()" Color="Color.Success">Lưu</MudButton>
	</DialogActions>
</MudDialog>
<style>
	.my-custom-class {
	backdrop-filter: blur(10px);
	}
</style>

@code {
	[CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

	[Inject] private ISenderAPI SenderAPI { get; set; } = default!;

	[Parameter] [EditorRequired] public ChiTietCaThiDto ChiTietCaThi { get; set; } = default!;

	[Parameter] [EditorRequired] public CaThiDto CaThi { get; set; } = default!;


	private ChiTietCaThiDto tempChiTietCaThi = default!;

	private CaThiDto tempCaThi = default!;
	private string? lyDoCong;


	private const string ALERT_ADDTIME = "Cộng giờ thêm được dùng trong trường hợp thí sinh bị treo máy hoặc nguyên nhân thích đáng khác";


	protected override async Task OnInitializedAsync()
	{
		tempCaThi = new CaThiDto(CaThi);

		tempChiTietCaThi = new ChiTietCaThiDto(ChiTietCaThi);

		await base.OnInitializedAsync();
	}
	public void OnClickExit()
	{
		MudDialog?.Close();
	}
	public async Task OnClickSaveAsync()
	{
		if (!ValidateForm())
		{
			return;
		}

		if (tempChiTietCaThi != null)
		{
			var result = await AddTimeAPI(tempChiTietCaThi.MaChiTietCaThi, tempChiTietCaThi.GioCongThem);

			if(result != null)
			{
				// riêng lý do cộng được thêm vào để update cho ca thi trả về
				result.LyDoCong = lyDoCong;
				MudDialog?.Close(DialogResult.Ok(result));
			}
			return;
		}
	}

	public bool ValidateForm()
	{
		if (tempChiTietCaThi.GioCongThem <= 0)
		{
			Snackbar.Add("Thời gian cộng phải lớn hơn 0", Severity.Error);
			return false;
		}

		if(string.IsNullOrWhiteSpace(lyDoCong))
		{
			Snackbar.Add("Lý do cộng giờ không được để trống", Severity.Error);
			return false;
		}

		return true;
	}

	private async Task<ChiTietCaThiDto?> AddTimeAPI(int maChiTietCaThi, int gioCongThem)
	{
		var response = await SenderAPI.PatchAsync<ChiTietCaThiDto>($"api/chitietcathis/{maChiTietCaThi}/cong-gio?gioCongThem={gioCongThem}", null);
		return (response.Success) ? response.Data : null;

	}

	private async Task<bool> ExamSession_UpdateAudit(int examSessionId, string history_action)
	{
		var response = await SenderAPI.PatchAsync<CaThiDto>($"api/cathis/{examSessionId}/update-audit", history_action);
		return response.Success;
	}
}