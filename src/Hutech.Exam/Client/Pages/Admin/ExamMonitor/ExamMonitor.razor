@page "/admin/monitor"
@using Hutech.Exam.Shared.DTO
@using Hutech.Exam.Shared.Enums
@attribute [Authorize(Roles = "QuanTri")]
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<PageTitle>Exam Monitor</PageTitle>

<MudContainer Class="d-flex justify-center align-center">
	<MudGrid Style="margin-top: 5px">
		<MudItem xs="2">
			<MudPaper Elevation="3" Class="pa-4" Style="margin-bottom: 20px">
				<MudButton StartIcon="@Icons.Material.Filled.PersonAddAlt1" Color="Color.Default" OnClick="async () => await OnClickAddStudentAsync()">Thêm SV</MudButton>
				<MudButton Class="button-side" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="async() => await OnClickRefreshAsync()">Refresh</MudButton>
				<MudButton Class="button-side" StartIcon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Default" OnClick="async () => await OnClickDownloadPdfAsync()">Export PDF</MudButton>
				<MudButton Class="button-side" StartIcon="@Icons.Material.Filled.DocumentScanner" Color="Color.Default" OnClick="OnClickDownloadExcelAsync">Export EXCEL</MudButton>
				<MudButton Class="button-side" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Default" OnClick="async () => await OnClickViewHistoryAsync()">Xem Lịch Sử</MudButton>
			</MudPaper>


			<MudPaper Elevation="3" Class="pa-4" Style="position: sticky; top: 15%">
				<MudText Typo="Typo.body1" Inline="false"><b style="color: brown">THỜI GIAN BIỂU</b></MudText><br />
				<MudText Typo="Typo.button" Inline="false"><span style="color: cornflowerblue">Tên thí sinh:</span><br />@studentName</MudText><br />
				<MudText Typo="Typo.button" Inline="false"><span style="color: cornflowerblue">Đăng nhập: </span>@loginTime</MudText><br />
				<MudText Typo="Typo.button" Inline="false"><span style="color: cornflowerblue">Đăng xuất: </span>@logoutTime</MudText><br />
				<MudText Typo="Typo.button" Inline="false"><span style="color: cornflowerblue">Bắt đầu thi:</span> @startTime</MudText><br />
				<MudText Typo="Typo.button" Inline="false"><span style="color: cornflowerblue">Kết thúc thi: </span>@endTime</MudText><br />
			</MudPaper>
		</MudItem>
		@if (examSessionDetails != null)
		{
			<MudItem xs="10">
				<MudTable Elevation="3" T="ChiTietCaThiDto" Items="@examSessionDetails" TotalItems="totalRecords" RowsPerPage="rowsPerPage" RowsPerPageChanged="async (value) => await OnRowsPerPageChange(value)" RowClass="cursor-pointer" RowClassFunc="SelectedRowClassExamSessionDetailFunc" OnRowClick="(value) => OnRowClickedExamSessionDetailAsync(value)"
						  CurrentPage="currentPage" CurrentPageChanged="async (value) => await OnCurrentPageChange(value)" Hover="true" Dense="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" Striped="true"
						  SortLabel="Sort By">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Thông tin ca thi</MudText>
						<MudSpacer />
						<MudTextField @bind-Value="searchString" Placeholder="Nhập họ tên hoặc mã số sinh viên" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" OnBlur="async () => await Filter()" IconSize="Size.Medium" Class="mt-0"></MudTextField>
					</ToolBarContent>
					<HeaderContent>
						<MudTh>STT</MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<ChiTietCaThiDto, object>(x=>x.MaSinhVienNavigation?.MaSoSinhVien ?? string.Empty)">MSSV</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<ChiTietCaThiDto, object>(x=>(x.MaSinhVienNavigation?.TenSinhVien, x.MaSinhVienNavigation?.HoVaTenLot))">Họ và Tên</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<ChiTietCaThiDto, object>(x=>x.MaDeThi ?? -1)">Mã Đề</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<ChiTietCaThiDto, object>(x=>x.DaHoanThanh)">Trạng Thái</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<ChiTietCaThiDto, object>(x=>x.MaSinhVienNavigation?.IsLoggedIn ?? false)">Đăng Nhập</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<ChiTietCaThiDto, object>(x=>x.GioCongThem)">Phút Cộng</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<ChiTietCaThiDto, object>(x=>x.Diem)">Điểm</MudTableSortLabel></MudTh>
						<MudTh>Chức năng</MudTh>
					</HeaderContent>
					<RowTemplate Context="item">
						<MudTd>@(examSessionDetails.IndexOf(item) + 1)</MudTd>
						<MudTd>@item.MaSinhVienNavigation?.MaSoSinhVien</MudTd>
						<MudTd>@item.MaSinhVienNavigation?.HoVaTenLot @item.MaSinhVienNavigation?.TenSinhVien</MudTd>
						<MudTd>@($"{item.KyHieuDe} ({item.MaDeThi})")</MudTd>
						<MudTd Style="@($"color: {GetStatusTakeExam(item)}")">@(item.DaHoanThanh ? "Đã thi" : item.DaThi ? "Đang thi" : "Chưa thi")</MudTd>
						<MudTd><MudSwitch T="bool" Value="item.MaSinhVienNavigation?.IsLoggedIn ?? false" ValueChanged="async (value) => await OnValueChangeStatusLogin(value, item.MaSinhVienNavigation)" Color="Color.Success" UncheckedColor="Color.Default"></MudSwitch></MudTd>
						<MudTd>@(item.GioCongThem == 0 ? "-" : item.GioCongThem)</MudTd>
						<MudTd>@(item.Diem == -1 ? "-" : item.Diem.ToString())</MudTd>
						<MudTd>
							<MudButtonGroup Style="zoom: 0.7">
								<MudTooltip Text="Cộng giờ thêm">
									<MudIconButton Icon="@Icons.Material.Filled.Timer" Color="Color.Success" OnClick="() => OnClickAddTimeAsync(item)" />
								</MudTooltip>
								<MudTooltip Text="Buộc nộp bài">
									<MudIconButton Icon="@Icons.Material.Filled.Warning" Color="Color.Info" OnClick="() => OnClickSubmitAsync(item)" />
								</MudTooltip>
								<MudTooltip Text="Xem chi tiết bài">
									<MudIconButton Icon="@Icons.Material.Filled.FindInPage" Color="Color.Secondary" OnClick="async () => await OnClickViewExamSubmissionDetailAsync(item)" />
								</MudTooltip>
								@if (roleName.Contains(KieuVaiTro.DaoTao.ToString()) || roleName.Contains(KieuVaiTro.Admin.ToString()))
								{
									<MudTooltip Text="Xóa">
										<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="async () => await OnClickDeleteExamSessionDetailAsync(item)" />
									</MudTooltip>
								}
							</MudButtonGroup>
						</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager PageSizeOptions="new int[] {20, 30, 60, 100}" AllItemsText="All" />
					</PagerContent>
				</MudTable>
			</MudItem>
		}
	</MudGrid>
</MudContainer>
<style>
	.button-side {
		margin-top: 5%;
	}

	.selected-row {
		background-color: #e0f7fa !important;
		font-weight: bold;
	}
</style>
<script>
	function downloadFile(fileName, base64Data) {
	const link = document.createElement('a');
	link.download = fileName;
	link.href = 'data:application/octet-stream;base64,' + base64Data;
	document.body.appendChild(link);
	link.click();
	document.body.removeChild(link);
	}

	// chuyển trang sang tab mới
	window.openInNewTab = function (url) {
	window.open(url, '_blank');
	};
</script>
@code {
	private string GetStatusTakeExam(ChiTietCaThiDto chiTietCaThi) => chiTietCaThi.DaHoanThanh ? "green" : chiTietCaThi.DaThi ? "black" : "red";
	private string GetStatusLogin(ChiTietCaThiDto chiTietCaThi) => chiTietCaThi.MaSinhVienNavigation?.IsLoggedIn == true ? "blue" : "black";

	private string? studentName, loginTime, logoutTime, startTime, endTime;

	private ChiTietCaThiDto? selectedExamSessionDetail;

	private string searchString = "";
	private int currentPage = 0;
	private int rowsPerPage = 20;
	private int totalRecords = 20;
	private int totalPages = 1;

	private List<int> selectedPages = new() { 0 }; // luôn load có trang đầu tiên

	private void CreateSchedule()
	{
		studentName = "######";
		loginTime = "dd/mm/yyyy";
		logoutTime = "dd/mm/yyyy";
		startTime = "dd/mm/yyyy";
		endTime = "dd/mm/yyyy";
	}

	private async Task Filter()
	{
		if (!string.IsNullOrEmpty(searchString))
		{
			(examSessionDetails, totalRecords, totalPages) = await ExamSessionDetails_SelectBy_ExamSessionId_Search_PagedAPI(examSession?.MaCaThi ?? -1, searchString, currentPage, rowsPerPage);
			CreateFakeData();
		}
		else
		{
			(examSessionDetails, totalRecords, totalPages) = await ExamSessionDetails_SelectBy_ExamSessionId_PagedAPI(examSession?.MaCaThi ?? -1, currentPage, rowsPerPage);
			CreateFakeData();
		}
		CreateSchedule();
	}

	private async Task OnRowsPerPageChange(int rows)
	{
		if (rows == rowsPerPage)
			return;

		this.rowsPerPage = rows;
		currentPage = 0; // Reset về trang đầu tiên

		(var newChiTietCaThis, _, _) = await ExamSessionDetails_SelectBy_ExamSessionId_PagedAPI(examSession?.MaCaThi ?? -1, currentPage, rowsPerPage);
		PadEmptyRows(newChiTietCaThis);
	}
	private async Task OnCurrentPageChange(int page)
	{
		if (page == currentPage)
			return;

		this.currentPage = page;
		if (selectedPages.Contains(page))
			return;

		// chỉ thực hiện load data khi người dùng chọn trang mới
		(var newChiTietCaThis, _, _) = await ExamSessionDetails_SelectBy_ExamSessionId_PagedAPI(examSession?.MaCaThi ?? -1, currentPage, rowsPerPage);
		PadEmptyRows(newChiTietCaThis);
		selectedPages?.Add(currentPage);
	}

	private async Task OnValueChangeStatusLogin(bool value, SinhVienDto? sinhVien)
	{

		if (value == false && sinhVien != null)
		{
			await OnClickResetLoginAsync(sinhVien);
		}
	}

	private void OnRowClickedExamSessionDetailAsync(TableRowClickEventArgs<ChiTietCaThiDto> args)
	{
		if (args.Item == selectedExamSessionDetail)
			return;
		selectedExamSessionDetail = args.Item;

		var clickedItem = args.Item;

		if (clickedItem != null)
		{
			studentName = clickedItem.MaSinhVienNavigation?.HoVaTenLot + " " + clickedItem.MaSinhVienNavigation?.TenSinhVien;
			loginTime = (clickedItem.MaSinhVienNavigation?.LastLoggedIn) == null ? "dd/mm/yyyy" : clickedItem.MaSinhVienNavigation.LastLoggedIn.Value.ToString("dd/MM/yyyy HH:mm");
			logoutTime = (clickedItem.MaSinhVienNavigation?.LastLoggedOut) == null ? "dd/mm/yyyy" : clickedItem.MaSinhVienNavigation.LastLoggedOut.Value.ToString("dd/MM/yyyy HH:mm");
			startTime = (clickedItem.ThoiGianBatDau) == null ? "dd/mm/yyyy" : clickedItem.ThoiGianBatDau.Value.ToString("dd/MM/yyyy HH:mm");
			endTime = (clickedItem.ThoiGianKetThuc) == null ? "dd/mm/yyyy" : clickedItem.ThoiGianKetThuc.Value.ToString("dd/MM/yyyy HH:mm");
		}
	}
	private string SelectedRowClassExamSessionDetailFunc(ChiTietCaThiDto item, int rowNumber)
	{
		return item == selectedExamSessionDetail ? "selected-row" : string.Empty;
	}
}