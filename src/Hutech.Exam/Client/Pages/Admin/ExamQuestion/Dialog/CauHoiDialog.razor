@using AutoMapper
@using Hutech.Exam.Client.API
@using Hutech.Exam.Client.Components.Dialogs
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Custom
@using Hutech.Exam.Shared.DTO.Request
@using Hutech.Exam.Shared.DTO.Request.CauHoi
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="min-width: 600px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs="4"><MudText>Tên nhóm:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text" style="color: green; font-weight: bold">@NhomCauHoi?.TenNhom</span></MudText></MudItem>
            <MudItem xs="6">
                <MudSelect Label="CLO" T="int" Clearable="true" @bind-Value="tempCauHoi.MaClo">
                    @if (Clos != null)
                    {
                        foreach (var item in Clos)
                        {
                            <MudSelectItem Value="item.MaClo">[@item.MaSoClo]: @item.TieuDe</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect Label="Kiểu nội dung" T="int" Clearable="true" @bind-Value="tempCauHoi.KieuNoiDung">
                    @foreach (KieuNoiDungCauHoi kieu in Enum.GetValues(typeof(KieuNoiDungCauHoi)))
                    {
                        <MudSelectItem Value="(int)kieu">[@((int)kieu)]: @kieu</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Tiêu đề" Variant="Variant.Outlined" Class="tieu-de" Required InputType="InputType.Text" @bind-Value="tempCauHoi.TieuDe" Lines="2" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField Label="Nội dung gốc" Class="noi-dung" Variant="Variant.Outlined" Required InputType="InputType.Text" @bind-Value="tempCauHoi.NoiDung" Lines="8" />
            </MudItem>

            <MudItem xs="12" Style="padding-top: 2px">
                <MudButton Class="add-button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Info" Style="margin-right: 5px" OnClick="async () => await OnClickViewNoiDung(tempCauHoi.NoiDung)">Xem chuyển</MudButton>
                <MudButton Class="add-button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Accessibility" Color="Color.Secondary" OnClick="async () => await OnClickHoTro()">Hỗ trợ</MudButton>
                <MudCheckBox T="bool" Label="Hoán vị câu trả lời" Value="tempCauHoi.HoanVi ?? false" ValueChanged="@(v => tempCauHoi.HoanVi = v)" Color="Color.Default" />
            </MudItem>

            <MudItem xs="12">
                @if (tempCauTraLois != null && tempCauTraLois.Count != 0)
                {
                    <MudTable Elevation="24" Style="border: 1px solid" T="CauTraLoiDto" Items="@tempCauTraLois" Hover="true" Dense="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" Striped="true" OnRowClick="OnRowClickedCauTraLoi" RowClass="cursor-pointer" RowClassFunc="SelectedRowClassCauTraLoiFunc">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Câu trả lời</MudText>
                            <MudSpacer />
                            @* Thêm button chỉnh sửa nội dung, di chuyển nội dung *@
                            <MudButton Class="add-button" Variant="Variant.Filled" Color="Color.Info" Style="margin-left: 2px" StartIcon="@Icons.Material.Filled.Sync">Sync</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add">Thêm</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">Sửa</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">Xóa</MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Nội dung</MudTh>
                            <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<CauTraLoiDto, object>(x=>x.ThuTu)">Thứ tự</MudTableSortLabel></MudTh>
                            <MudTh>Là đáp án</MudTh>
                            <MudTh>Hoán vị</MudTh>
                            <MudTh>Chức năng</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="cauTraLoi">
                            <MudTd DataLabel="Nội dung">@(string.IsNullOrEmpty(cauTraLoi.NoiDung) ? "-" : cauTraLoi.NoiDung)</MudTd>
                            <MudTd DataLabel="Thứ tự">@cauTraLoi.ThuTu</MudTd>
                            <MudTd DataLabel="Là đáp án"><MudCheckBox Class="checkbox" ReadOnly="true" Value="@cauTraLoi.LaDapAn"></MudCheckBox></MudTd>
                            <MudTd DataLabel="Hoán vị"><MudCheckBox Class="checkbox" ReadOnly="true" Value="@cauTraLoi.HoanVi"></MudCheckBox></MudTd>
                            <MudTd DataLabel="Chức năng">
                                <MudButtonGroup Style="zoom: 0.7">
                                    <MudTooltip Text="Xem chuyển">
                                        <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="async () => await OnClickViewNoiDung(cauTraLoi.NoiDung)" Color="Color.Warning" />
                                    </MudTooltip>
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudItem>
            


        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if (!IsEdit)
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Success">Thêm</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickSua()" Color="Color.Success">Sửa</MudButton>
        }

    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }

    .checkbox {
        transform: scale(0.85);
    }

    .add-button {
        transform: scale(0.85);
        margin-bottom: 2%;
    }

    .tieu-de {
    background-color: lightcyan;
    }

    .noi-dung {
    background-color: lightyellow;
    }

    .selected-row {
        background-color: lightgray !important;
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    [Inject] public IMapper mapper { get; set; } = default!;

    [Parameter] public CauHoiDto? CauHoi { get; set; }

    [Parameter][EditorRequired] public NhomCauHoiDto? NhomCauHoi { get; set; }

    [Parameter][EditorRequired] public List<CloDto>? Clos { get; set; }

    [Parameter] public bool IsEdit { get; set; } = false;

    private CauHoiDto tempCauHoi = default!;

    private List<CauTraLoiDto> tempCauTraLois = new();

	private CauTraLoiDto? selectedCauTraLoi = null;


    bool isReadyToCreateQuestion = false;


    private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";


    protected async override Task OnInitializedAsync()
    {
        HandleInput();
        await base.OnInitializedAsync();
    }
    private void OnClickThoat()
    {
        MudDialog?.Cancel();
    }
    private void HandleInput()
    {
        if (IsEdit && CauHoi != null)
        {
            tempCauHoi = new CauHoiDto(CauHoi);
			tempCauTraLois = new List<CauTraLoiDto>(tempCauHoi.CauTraLois);
            isReadyToCreateQuestion = true;
            return;
        }
        tempCauHoi = new CauHoiDto();
    }

    private async Task OnClickThem()
    {
        if (!isValidForm())
            return;
        var result = await InsertAPI(new CauHoiCreateRequest
            {
                MaNhom = NhomCauHoi?.MaNhom ?? -1,
                MaClo = tempCauHoi.MaClo,
                TieuDe = tempCauHoi.TieuDe ?? string.Empty,
                KieuNoiDung = tempCauHoi.KieuNoiDung == 0 ? -1 : tempCauHoi.KieuNoiDung,
                NoiDung = tempCauHoi.NoiDung ?? string.Empty,
                ThuTu = tempCauHoi.ThuTu,
                HoanVi = tempCauHoi.HoanVi ?? false,
                GhiChu = tempCauHoi.GhiChu ?? string.Empty
            });
        if (result != null && result.MaCauHoi != 0)
        {
            isReadyToCreateQuestion = true;
			MudDialog?.Close(DialogResult.Ok(result));
        }

    }

    private async Task OnClickSua()
    {
        if (!isValidForm())
            return;
        var result = await UpdateAPI(tempCauHoi.MaCauHoi, new CauHoiUpdateRequest
            {
                MaNhom = NhomCauHoi?.MaNhom ?? -1,
                MaClo = tempCauHoi.MaClo,
                TieuDe = tempCauHoi.TieuDe ?? string.Empty,
                KieuNoiDung = tempCauHoi.KieuNoiDung == 0 ? -1 : tempCauHoi.KieuNoiDung,
                NoiDung = tempCauHoi.NoiDung ?? string.Empty,
				ThuTu = tempCauHoi.ThuTu,
                HoanVi = tempCauHoi.HoanVi ?? false,
                GhiChu = tempCauHoi.GhiChu ?? string.Empty
            });
        if (result != null && result.MaCauHoi != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }
    private async Task OnClickViewNoiDung(string? text)
    {
        var parameters = new DialogParameters<NoiDungCauHoiDialog>
        {
            { x => x.Text, text},
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };
        await Dialog.ShowAsync<NoiDungCauHoiDialog>("XEM CHUYỂN", parameters, options);
    }
    private async Task OnClickHoTro()
    {
        var parameters = new DialogParameters<HoTroDialog> { };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };

        await Dialog.ShowAsync<HoTroDialog>("HƯỚNG DẪN", parameters, options);
    }
    private bool isValidForm()
    {
        if (string.IsNullOrEmpty(tempCauHoi.TieuDe) || string.IsNullOrEmpty(tempCauHoi.NoiDung))
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return false;
        }
        return true;
    }

    private void OnRowClickedCauTraLoi(TableRowClickEventArgs<CauTraLoiDto> args)
    {
        if (args.Item == selectedCauTraLoi)
            return;

        selectedCauTraLoi = args.Item;
    }

    private string SelectedRowClassCauTraLoiFunc(CauTraLoiDto item, int rowNumber)
    {
        return item == selectedCauTraLoi ? "selected-row" : string.Empty;
    }


    private async Task<CauHoiDto?> InsertAPI(CauHoiCreateRequest cauHoi)
    {
        var response = await SenderAPI.PostAsync<CauHoiDto>("api/cauhois", cauHoi);
        return (response.Success) ? response.Data : null;
    }
    private async Task<CauHoiDto?> UpdateAPI(int id, CauHoiUpdateRequest cauHoi)
    {
        var response = await SenderAPI.PutAsync<CauHoiDto>($"api/cauhois/{id}", cauHoi);
        return (response.Success) ? response.Data : null;
    }



}
