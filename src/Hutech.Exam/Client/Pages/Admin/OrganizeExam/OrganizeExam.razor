@page "/admin/organize"
@using Hutech.Exam.Shared.DTO
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@attribute [Authorize(Roles = "Admin")]


<PageTitle>Organize Exam</PageTitle>

<MudContainer Class="d-flex justify-center align-center">
    <MudGrid Style="margin-top: 7px; margin-left: 5px">
        <MudGrid>
            <MudItem xs="6">
                @if (examBatchs != null)
                {
                    <MudTable Class="my-custom-table" Elevation="3" T="DotThiDto" Items="@examBatchs" Hover="true" Bordered="true" Dense="true" FixedHeader="true" Striped="true" OnRowClick="async (value) => await OnRowClickedExamBatchAsync(value)" RowClass="cursor-pointer" RowClassFunc="SelectedRowClassExamBatchFunc"
                              TotalItems="totalRecords_ExamBatch" RowsPerPage="rowsPerPage_ExamBatch" CurrentPageChanged="OnCurrentPageChange_ExamBatchAsync" RowsPerPageChanged="OnRowsPerPageChange_ExamBatchAsync">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Thông tin đợt thi</MudText>
                            <MudSpacer />
                            <MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.Sync" OnClick="async () => await StartAsync()">Sync</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="async () => await OnClickAddExamBatchAsync()">Thêm</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="async () => await OnClickEditExamBatchAsync()">Sửa</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="async () => await OnClickDeleteExamBatchAsync()">Xóa</MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>ID</MudTh>
                            <MudTh>Đợt Thi</MudTh>
                            <MudTh>Năm Học</MudTh>
                            <MudTh>Ngày Kết Thúc</MudTh>
                            <MudTh>Ngày Kết Thúc</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="item">
                            <MudTd DataLabel="ID">@item?.MaDotThi</MudTd>
                            <MudTd DataLabel="Đợt Thi">@item?.TenDotThi</MudTd>
                            <MudTd DataLabel="Năm Học">@item?.NamHoc</MudTd>
                            <MudTd DataLabel="Ngày Kết Thúc">@(item?.ThoiGianBatDau.HasValue == true ? @item.ThoiGianBatDau.Value.ToString("dd/MM/yyyy") : "Không có DL")</MudTd>
                            <MudTd DataLabel="Ngày Kết Thúc">@(item?.ThoiGianKetThuc.HasValue == true ? @item.ThoiGianKetThuc.Value.ToString("dd/MM/yyyy") : "Không có DL")</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] {20, 30, 60, 100}" AllItemsText="All" />
                        </PagerContent>
                    </MudTable>
                }
            </MudItem>
            <MudItem xs="6">
                @if (examBatchDetails != null)
                {
                    <MudTable Class="my-custom-table" Elevation="3" T="ChiTietDotThiDto" Items="@examBatchDetails" Hover="true" Bordered="true" Dense="true" FixedHeader="true" Striped="true" OnRowClick="async (value) => await OnRowClickedExamBatchDetailAsync(value)" RowClass="cursor-pointer" RowClassFunc="SelectedRowClassExamBatchDetailFunc"
                              TotalItems="totalRecords_ExamBatchDetail" RowsPerPage="rowsPerPage_ExamBatchDetail" CurrentPageChanged="OnCurrentPageChange_ExamBachDetailAsync" RowsPerPageChanged="OnRowsPerPageChange_ExamBatchDetailAsync">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Thông tin chi tiết đợt thi</MudText>
                            <MudSpacer />
                            <MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.Sync" OnClick="async () => await FetchExamBatchDetailAsync()">Sync</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="async () => await OnClickAddExamBatchDetailAsync()">Thêm</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="async () => await OnClickEditExamBatchDetailAsync()">Sửa</MudButton>
                            <MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="async () => await OnClickDeleteExamBatchDetailAsync()">Xóa</MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>ID</MudTh>
                            <MudTh>Môn Thi</MudTh>
                            <MudTh>Phòng Thi</MudTh>
                            <MudTh>Lần Thi</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="item">
                            <MudTd DataLabel="ID">@item?.MaChiTietDotThi</MudTd>
                            <MudTd DataLabel="Môn Thi">@item?.MaLopAoNavigation.MaMonHocNavigation?.TenMonHoc</MudTd>
                            <MudTd DataLabel="Phòng Thi">@item?.MaLopAoNavigation.TenLopAo</MudTd>
                            <MudTd DataLabel="Lần Thi">@item?.LanThi</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] {20, 30, 60, 100}" AllItemsText="All" />
                        </PagerContent>
                    </MudTable>
                }
            </MudItem>
        </MudGrid>
        @if (examSessions != null)
        {
            <MudTable Class="my-custom-table" Elevation="3" T="CaThiDto" Items="@examSessions" Hover="true" Bordered="true" Dense="true" FixedHeader="true" Striped="true" OnRowClick="OnRowClickedExamSessionAsync" Style="margin-top: 5%" RowClass="cursor-pointer" RowClassFunc="SelectedRowClassExamSessionFunc"
                      TotalItems="totalRecords_ExamSession" RowsPerPage="rowsPerPage_ExamSession" CurrentPageChanged="OnCurrentPageChange_ExamSessionAsync" RowsPerPageChanged="OnRowsPerPageChange_ExamSessionAsync">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Thông tin ca thi</MudText>
                    <MudSpacer />
                    <MudButton Class="add-button final-table-button" Variant="Variant.Outlined" Color="Color.Warning" StartIcon="@Icons.Material.Filled.People" OnClick="async () => await OnClickUploadStudentListToExamSessionAsync()">Cập nhật sinh viên vào ca thi</MudButton>
                    <MudButton Class="add-button final-table-button" Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.Sync" OnClick="async () => await FetchExamSessionAsync()">Sync</MudButton>
                    <MudButton Class="add-button final-table-button" Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="async () => await OnClickAddExamSessionAsync()">Thêm</MudButton>
                    <MudButton Class="add-button final-table-button" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="async () => await OnClickEditExamSessionAsync()">Sửa</MudButton>
                    <MudButton Class="add-button final-table-button" Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="async () => await OnClickDeleteExamSessionAsync()">Xóa</MudButton>
                    <MudTextField @bind-Value="searchString" Style="margin-left: 15px" Placeholder="Nhập tên hoặc mã ca thi" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" OnBlur="async () => await FilterAsync()" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Tên Ca Thi</MudTh>
                    <MudTh>Ngày Thi</MudTh>
                    <MudTh>Thời Lượng</MudTh>
                    <MudTh>Tổng SL thí sinh</MudTh>
                    <MudTh>Có Đề?</MudTh>
                    <MudTh>Kích Hoạt?</MudTh>
                    <MudTh>TG Kích Hoạt</MudTh>
                    <MudTh>Kết Thúc?</MudTh>
                    <MudTh>TG Kết Thúc</MudTh>
                    <MudTh>Chức năng</MudTh>
                </HeaderContent>
                <RowTemplate Context="item">
                    <MudTd DataLabel="ID">@item?.MaCaThi</MudTd>
                    <MudTd DataLabel="Tên Ca Thi">@item?.TenCaThi</MudTd>
                    <MudTd DataLabel="Ngày Thi">@item?.ThoiGianBatDau</MudTd>
                    <MudTd DataLabel="Thời Lượng">@item?.ThoiGianThi</MudTd>
                    <MudTd DataLabel="Tổng SL thí sinh">@item?.TongSV</MudTd>
                    <MudTd DataLabel="Có Đề?"><MudSwitch ReadOnly="true" Class="checkbox" Value="item.DaGanDe" Color="Color.Success" UncheckedColor="Color.Dark"></MudSwitch></MudTd>
                    <MudTd DataLabel="Kích Hoạt?"><MudSwitch Class="checkbox" ReadOnly="true" Value="@item.KichHoat" Color="Color.Success" UncheckedColor="Color.Dark"></MudSwitch></MudTd>
                    <MudTd DataLabel="TG Kích Hoạt">@item?.ThoiGianKichHoat</MudTd>
                    <MudTd DataLabel="Kết Thúc?"><MudSwitch Class="checkbox" ReadOnly="true" Value="@item.KetThuc" Color="Color.Success" UncheckedColor="Color.Dark"></MudSwitch></MudTd>
                    <MudTd DataLabel="TG Kết Thúc">@item?.ThoiDiemKetThuc</MudTd>
                    <MudTd>
                        <MudButtonGroup Style="zoom: 0.7">
                            <MudTooltip Text="Xem chi tiết">
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" OnClick="async () => await OnClickShowExamBatchDetailAsync(item)" />
                            </MudTooltip>
                            <MudTooltip Text="Cập nhật đề thi">
                                <MudIconButton Icon="@Icons.Material.Filled.Calculate" Color="Color.Info" OnClick="async () => await OnClickUpdateExamAsync(item)" />
                            </MudTooltip>
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] {20, 30, 60, 100}" AllItemsText="All" />
                </PagerContent>
            </MudTable>
        }
    </MudGrid>
</MudContainer>
<style>
    .add-button {
        transform: scale(0.85);
    }

    .final-table-button {
        margin-top: 1%;
    }


    .selected-row {
        background-color: #e0f7fa !important;
        font-weight: bold;
    }

    .my-custom-table {
        border: 1px solid #ccc !important;
        border-radius: 6px !important;
    }

        .my-custom-table .mud-table-row:hover {
            background-color: #f1f1f1 !important;
            cursor: pointer !important;
        }
</style>

@code {
    private string searchString = "";
    private int currentPage_ExamBatch = 0;

    // thông số cho bảng đợt thi
    private int rowsPerPage_ExamBatch = 20;
    private int totalRecords_ExamBatch = 20;
    private int totalPages_ExamBatch = 1;

    // thông số cho bảng chi tiết đợt thi
    private int currentPage_ExamBatchDetail = 0;
    private int rowsPerPage_ExamBatchDetail = 20;
    private int totalRecords_ExamBatchDetail = 20;
    private int totalPages_ExamBatchDetail = 1;

    // thông số cho bảng ca thi
    private int currentPage_ExamSession = 0;
    private int rowsPerPage_ExamSession = 20;
    private int totalRecords_ExamSession = 20;
    private int totalPages_ExamSession = 1;



    private DotThiDto? selectedExamBatch;
    private ChiTietDotThiDto? selectedExamBatchDetail;
    private CaThiDto? selectedExamSession;

    private List<int> selectedPages_ExamBatch = new() { 0 }; // luôn load có trang đầu tiên
    private List<int> selectedPages_ExamBatchDetail = new() { 0 }; // luôn load có trang đầu tiên
    private List<int> selectedPages_ExamSession = new() { 0 }; // luôn load có trang đầu tiên

    private async Task OnRowsPerPageChange_ExamBatchAsync(int rows)
    {
        if (rows == rowsPerPage_ExamBatch)
            return;

        this.rowsPerPage_ExamBatch = rows;
        currentPage_ExamBatch = 0; //Reset về trang đầu tiên

        (var newDotThis, _, _) = await ExamBatchs_GetAllAPI(currentPage_ExamBatch, rowsPerPage_ExamBatch);
        PadEmptyRows(newDotThis);
    }
    private async Task OnCurrentPageChange_ExamBatchAsync(int page)
    {
        if (page == currentPage_ExamBatch)
            return;

        this.currentPage_ExamBatch = page;
        if (selectedPages_ExamBatch.Contains(page))
            return;

        //chỉ thực hiện load data khi người dùng chọn trang mới
        (var newDotThis, _, _) = await ExamBatchs_GetAllAPI(currentPage_ExamBatch, rowsPerPage_ExamBatch);
        PadEmptyRows(newDotThis);
        selectedPages_ExamBatch?.Add(currentPage_ExamBatch);
    }


    private async Task OnRowsPerPageChange_ExamBatchDetailAsync(int rows)
    {
        if (rows == rowsPerPage_ExamBatchDetail || selectedExamBatch == null)
            return;

        this.rowsPerPage_ExamBatchDetail = rows;
        currentPage_ExamBatchDetail = 0; //Reset về trang đầu tiên

        (var newChiTietDotThis, _, _) = await ExamBatchDetailDetail_SelectBy_ExamBatchId_PagedAPI(selectedExamBatch.MaDotThi, currentPage_ExamBatchDetail, rowsPerPage_ExamBatchDetail);
        PadEmptyRows(newChiTietDotThis);
    }
    private async Task OnCurrentPageChange_ExamBachDetailAsync(int page)
    {
        if (page == currentPage_ExamBatchDetail || selectedExamBatch == null)
            return;

        this.currentPage_ExamBatchDetail = page;
        if (selectedPages_ExamBatchDetail.Contains(page))
            return;

        //chỉ thực hiện load data khi người dùng chọn trang mới
        (var newChiTietDotThis, _, _) = await ExamBatchDetailDetail_SelectBy_ExamBatchId_PagedAPI(selectedExamBatch.MaDotThi, currentPage_ExamBatchDetail, rowsPerPage_ExamBatchDetail);
        PadEmptyRows(newChiTietDotThis);
        selectedPages_ExamBatchDetail?.Add(currentPage_ExamBatchDetail);
    }

    private async Task OnRowsPerPageChange_ExamSessionAsync(int rows)
    {
        if (rows == rowsPerPage_ExamSession || selectedExamBatch == null || selectedExamBatchDetail == null)
            return;

        this.rowsPerPage_ExamSession = rows;
        currentPage_ExamSession = 0; //Reset về trang đầu tiên

        (var newCaThis, _, _) = await ExamSessions_SelectBy_ExamBatchDetailId_PagedAPI(selectedExamBatchDetail.MaChiTietDotThi, currentPage_ExamSession, rowsPerPage_ExamSession);
        PadEmptyRows(newCaThis);
    }
    private async Task OnCurrentPageChange_ExamSessionAsync(int page)
    {
        if (page == currentPage_ExamSession || selectedExamBatch == null || selectedExamBatchDetail == null)
            return;

        this.currentPage_ExamSession = page;
        if (selectedPages_ExamSession.Contains(page))
            return;

        //chỉ thực hiện load data khi người dùng chọn trang mới
        (var newCaThis, _, _) = await ExamSessions_SelectBy_ExamBatchDetailId_PagedAPI(selectedExamBatchDetail.MaChiTietDotThi, currentPage_ExamSession, rowsPerPage_ExamSession);
        PadEmptyRows(newCaThis);
        selectedPages_ExamSession?.Add(currentPage_ExamSession);
    }


    private async Task OnRowClickedExamBatchAsync(TableRowClickEventArgs<DotThiDto> args)
    {
        if (args.Item == selectedExamBatch)
            return;
        selectedExamBatch = args.Item;
        selectedExamBatchDetail = null;
        selectedExamSession = null;
        await SaveDataAsync();
        examBatchDetails = [];
        examSessions = [];

        await FetchExamBatchDetailAsync();
    }
    private string SelectedRowClassExamBatchFunc(DotThiDto item, int rowNumber)
    {
        return item == selectedExamBatch ? "selected-row" : string.Empty;
    }
    private async Task OnRowClickedExamBatchDetailAsync(TableRowClickEventArgs<ChiTietDotThiDto> args)
    {
        if (args.Item == selectedExamBatchDetail)
            return;
        selectedExamBatchDetail = args.Item;
        selectedExamSession = null;
        await SaveDataAsync();
        examSessions = [];

        await FetchExamSessionAsync();
    }
    private string SelectedRowClassExamBatchDetailFunc(ChiTietDotThiDto item, int rowNumber)
    {
        return item == selectedExamBatchDetail ? "selected-row" : string.Empty;
    }

    private string SelectedRowClassExamSessionFunc(CaThiDto item, int rowNumber)
    {
        return item == selectedExamSession ? "selected-row" : string.Empty;
    }
    private async void OnRowClickedExamSessionAsync(TableRowClickEventArgs<CaThiDto> args)
    {
        if (args.Item == selectedExamSession)
            return;
        selectedExamSession = args.Item;
        await SaveDataAsync();
    }

    private async Task FilterAsync()
    {
        if (!string.IsNullOrEmpty(searchString))
        {
            (examSessions, totalRecords_ExamSession, totalPages_ExamSession) = await ExamSessions_SelectBy_ExamBatchDetailId_Search_PagedAPI(selectedExamBatchDetail?.MaChiTietDotThi ?? -1, searchString, currentPage_ExamSession, rowsPerPage_ExamSession);
            CreateFakeData_CT();
        }
        else
        {
            await FetchExamSessionAsync();
        }
    }
}