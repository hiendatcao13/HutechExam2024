@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Request.LopAo
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 500px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudTextField Label="Tên phòng thi" Required InputType="InputType.Text" @bind-Value="tempLopAo.TenLopAo" Placeholder="E1.08-09" />
        <MudDatePicker Editable="true" Label="Ngày bắt đầu" @bind-Date="tempLopAo.NgayBatDau" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Dialog" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if (IsEdit)
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickSua()" Color="Color.Success">Sửa</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Success">Thêm</MudButton>
        }
    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    [Parameter][EditorRequired] public int MaMonHoc { get; set; } = 0;

    [Parameter] public LopAoDto? LopAo { get; set; }

    [Parameter] public bool IsEdit { get; set; } = false;

    private LopAoDto tempLopAo = default!;

    private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";

    protected override async Task OnInitializedAsync()
    {
        HandleInput();
        await base.OnInitializedAsync();
    }
    private void HandleInput()
    {
        if (LopAo != null && IsEdit)
        {
            tempLopAo = new LopAoDto(LopAo);
        }
        tempLopAo = new();
    }
    private void OnClickThoat()
    {
        MudDialog?.Cancel();
    }
    private async Task OnClickThem()
    {
        if (string.IsNullOrEmpty(tempLopAo.TenLopAo) || tempLopAo.NgayBatDau == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        var result = await InsertLopAoAPI( new LopAoCreateRequest{ 
                TenLopAo = tempLopAo.TenLopAo,
                NgayBatDau = (DateTime)tempLopAo.NgayBatDau,
            MaMonHoc = MaMonHoc
        });

        if (result != null && result.MaLopAo != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }
    private async Task OnClickSua()
    {
        if (string.IsNullOrEmpty(tempLopAo.TenLopAo) || tempLopAo.NgayBatDau == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        var result = await UpdateLopAoAPI(LopAo?.MaLopAo ?? -1, new LopAoUpdateRequest
            {
                TenLopAo = tempLopAo.TenLopAo,
                NgayBatDau = (DateTime)tempLopAo.NgayBatDau,
                MaMonHoc = MaMonHoc
            });

        if (result != null && result.MaLopAo != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }

    private async Task<LopAoDto?> InsertLopAoAPI(LopAoCreateRequest lopAo)
    {
        var response = await SenderAPI.PostAsync<LopAoDto>("api/lopaos", lopAo);
        return (response.Success) ? response.Data : null;
    }

    private async Task<LopAoDto?> UpdateLopAoAPI(int ma_lop_ao, LopAoUpdateRequest lopAo)
    {
        var response = await SenderAPI.PutAsync<LopAoDto>($"api/lopaos/{ma_lop_ao}", lopAo);
		return (response.Success) ? response.Data : null;
    }

}
