@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 500px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudTextField Label="Tên phòng thi" Required InputType="InputType.Text" @bind-Value="ten_lop" Placeholder="E1.08-09" />
        <MudDatePicker Editable="true" Label="Ngày bắt đầu" @bind-Date="ngay_bat_dau" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Dialog" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if (IsEdit)
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickSua()" Color="Color.Success">Sửa</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Success">Thêm</MudButton>
        }
    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    [Inject] public HttpClient Http { get; set; } = default!;
    [Parameter] public int MaMonHoc { get; set; } = 0;
    [Parameter] public LopAoDto? LopAo { get; set; }
    [Parameter] public bool IsEdit { get; set; } = false;

    private string? ten_lop;
    private DateTime? ngay_bat_dau;

    // kết quả id mới nhất được tạo ra
    private int? result_id;

    private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";
    private const string SUCCESS_ADDLOP = "Thêm phòng thi thành công";
    private const string FAIL_ADDLOP = "Thêm phòng thi thất bại";
    private const string SUCCESS_EDITLOP = "Sửa phòng thi thành công";
    private const string FAIL_EDITLOP = "Sửa phòng thi thất bại";

    protected override async Task OnInitializedAsync()
    {
        HandleInput();
        await base.OnInitializedAsync();
    }
    private void HandleInput()
    {
        if (LopAo != null && IsEdit)
        {
            ten_lop = LopAo.TenLopAo;
            ngay_bat_dau = LopAo.NgayBatDau;
        }
    }
    private void OnClickThoat()
    {
        MudDialog?.Cancel();
    }
    private async Task OnClickThem()
    {
        if (string.IsNullOrEmpty(ten_lop) || ngay_bat_dau == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        var result = await InsertLopAoAPI(CreateLopAo(ten_lop, (DateTime)ngay_bat_dau));
        if (result)
        {
            Snackbar.Add(SUCCESS_ADDLOP, Severity.Success);
            MudDialog?.Close(DialogResult.Ok(result_id));
        }
        else
        {
            Snackbar.Add(FAIL_ADDLOP, Severity.Error);
        }
    }
    private async Task OnClickSua()
    {
        if (string.IsNullOrEmpty(ten_lop) || ngay_bat_dau == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        var result = await UpdateLopAoAPI(CreateLopAo(ten_lop, (DateTime)ngay_bat_dau));
        if (result)
        {
            Snackbar.Add(SUCCESS_EDITLOP, Severity.Success);
            MudDialog?.Close(DialogResult.Ok(result_id));
        }
        else
        {
            Snackbar.Add(FAIL_EDITLOP, Severity.Error);
        }
    }

    private async Task<bool> InsertLopAoAPI(LopAoDto lopAo)
    {
        var json = JsonSerializer.Serialize(lopAo);
        var response = await Http.PostAsync("api/LopAo/Insert", new StringContent(json, Encoding.UTF8, "application/json"));
        if (response.IsSuccessStatusCode)
        {
            result_id = await response.Content.ReadFromJsonAsync<int?>();
            return true;
        }
        return false;
    }
    private async Task<bool> UpdateLopAoAPI(LopAoDto lopAo)
    {
        var json = JsonSerializer.Serialize(lopAo);
        var response = await Http.PutAsync("api/LopAo/Update", new StringContent(json, Encoding.UTF8, "application/json"));
        if (response.IsSuccessStatusCode)
        {
            result_id = lopAo.MaLopAo;
            return true;
        }
        return false;
    }
    private LopAoDto CreateLopAo(string ten_lop, DateTime ngay_bat_dau)
    {
        return new LopAoDto
            {
                MaLopAo = LopAo?.MaLopAo ?? 0,
                TenLopAo = ten_lop,
                NgayBatDau = ngay_bat_dau,
                MaMonHoc = MaMonHoc
            };
    }
}
