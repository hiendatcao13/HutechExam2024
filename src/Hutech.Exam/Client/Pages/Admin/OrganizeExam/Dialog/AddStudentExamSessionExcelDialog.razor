@using Hutech.Exam.Client.API
@using Hutech.Exam.Client.Components.Dialogs
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Request.ChiTietCaThi
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 500px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText>@((MarkupString)(MESSAGE))</MudText>
            </MudItem>

            <MudItem xs="12">
                <MudTextField Variant="Variant.Outlined" Label="SL kí tự quy định MSSV" Style="width:200px" @bind-Value="numberOfStudentCode" Typo="Typo.body2" Color="Color.Default" InputType="InputType.Number" HelperText="không check vui lòng để -1" />
            </MudItem>

            <MudItem xs="6" Style="padding-top: 10px">
                <MudCheckBox @bind-Value="isStudentCodeAllNumber">MSSV phải là số</MudCheckBox>
            </MudItem>

            <MudItem xs="12">
                <Microsoft.AspNetCore.Components.Forms.InputFile class="form-control-sm w-70" OnChange="HandleFileUploadAsync" accept=".xls,.xlsx">
                </Microsoft.AspNetCore.Components.Forms.InputFile>
            </MudItem>
        </MudGrid>
        <MudText Color="Color.Warning" Typo="Typo.subtitle2">@NOTE</MudText>
        <MudText Color="Color.Success">Số dòng được ghi nhận: @totalRecords</MudText>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="OnClickExit" Color="Color.Default">Thoát</MudButton>
        @if (isReadyToSave)
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="async() => await OnClickSaveAsync()">Lưu</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Success" Disabled>Lưu</MudButton>
        }
    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }

</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    int totalRecords = 0; // số dòng được ghi nhận

    bool isReadyToSave = false;

    Dictionary<string, ChiTietCaThiCreateBatchRequest> examSessionDetails = [];

    //mssv
    int numberOfStudentCode = -1; // tổng số kí tự MSSV
    bool isStudentCodeAllNumber = false; // chỉ chứa toàn số


    const string MESSAGE = "Bảng sheet theo trình tự: <b style='color:red;'>[MSSV], [MaCaThi], [MaDeThi?] </b>";
    const string NOTE = "Lưu ý: File excel có thể có hoặc không có tiêu đề HEADING, dữ liệu đọc bắt đầu từ ô A2 tại sheet 1. \nFile tối đa 5MB. MSSV và mã ca thi bắt buộc không được rỗng hoặc MSSV trùng lặp trong file." +
                            "Thêm thí sinh vào ca thi thành công chỉ khi thí sinh đó đã tồn tại trong bảng sinh viên";
    const string NOT_FORMAT_EXCEL = "Định dạng file không phải Excel hoặc file rỗng";
    const string WAITING_MESSAGE = "Hệ thống sẽ mất ít thời gian để hoàn thành. Vui lòng chờ";
    const string NO_SINHVIENCATHI = "Không có sinh viên nào vào ca thi được ghi nhận. Vui lòng kiểm tra lại file Excel.";
    const string NO_ERROR = "Hệ thống đã ghi nhận toàn bộ thông tin. Sẵn sàng để lưu";


    private void OnClickExit()
    {
        MudDialog?.Cancel();
    }

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        isReadyToSave = false;
        examSessionDetails.Clear();

        Snackbar.Add(WAITING_MESSAGE, Severity.Info);

        var file = e.File;
        if (file is null || !(file.ContentType == "application/vnd.ms-excel" || file.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") ||
            !(file.Name.EndsWith(".xls", StringComparison.OrdinalIgnoreCase) || file.Name.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase)))
        {
            Snackbar.Add(NOT_FORMAT_EXCEL, Severity.Error);
            return;
        }

        using var memoryStream = new MemoryStream();
        await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(memoryStream); // 5 MB
        memoryStream.Position = 0;

        ExcelPackage.License.SetNonCommercialPersonal("Pino Dat");
        using var package = new ExcelPackage(memoryStream);
        var worksheet = package.Workbook.Worksheets[0]; // Lấy sheet đầu tiên
        var rowCount = worksheet.Dimension.End.Row;       // Số dòng

        totalRecords = rowCount - 1; // Bỏ qua dòng tiêu đề

        for (int row = 2; row <= rowCount; row++) // Bỏ qua dòng tiêu đề
        {

            var chiTietCaThi = new ChiTietCaThiCreateBatchRequest
            {
                MaSoSinhVien = NormalizeString(worksheet.Cells[row, 1].Text) + "",
                MaCaThi = int.TryParse(worksheet.Cells[row, 2].Text?.Trim(), out int maCaThi) ? maCaThi : 0,
                MaDeThi = long.TryParse(worksheet.Cells[row, 3].Text?.Trim(), out long maDeThi) ? maDeThi : null,
            };


            if (!ValidateData(row, chiTietCaThi))
            {
                isReadyToSave = false;
                return;
            }

            examSessionDetails[chiTietCaThi.MaSoSinhVien + ""] = chiTietCaThi; // Lưu sinh viên vào từ điển

        }

        if (examSessionDetails.Count == 0)
        {
            Snackbar.Add(NO_SINHVIENCATHI, Severity.Warning);
            isReadyToSave = false;
            return;
        }

        Snackbar.Add(NO_ERROR, Severity.Success);
        isReadyToSave = true;
        return;
    }


    private bool ValidateData(int row, ChiTietCaThiCreateBatchRequest chiTietCaThi)
    {
        //Kiểm tra nếu MSSV rỗng
        if (string.IsNullOrWhiteSpace(chiTietCaThi.MaSoSinhVien))
        {
            Snackbar.Add($"Dòng {row}: MSSV bị trống. Vui lòng kiểm tra");
            return false;
        }

        //Kiểm tra độ dài của MSSV
        if (numberOfStudentCode != -1 && numberOfStudentCode != chiTietCaThi.MaSoSinhVien.Length)
        {
            Snackbar.Add($"Dòng {row}: MSSV phải có độ dài {numberOfStudentCode} ký tự. Vui lòng kiểm tra");
            return false;
        }

        //Kiểm tra nếu MSSV chỉ chứa toàn số
        if (isStudentCodeAllNumber == true && !HasAllNumberStudentCode(chiTietCaThi.MaSoSinhVien))
        {
            Snackbar.Add($"Dòng {row}: MSSV phải chỉ chứa toàn số. Vui lòng kiểm tra");
            return false;
        }

        // Kiểm tra nếu MSSV bị lặp
        if (examSessionDetails.ContainsKey(chiTietCaThi.MaSoSinhVien))
        {
            Snackbar.Add($"Dòng {row}: MSSV {chiTietCaThi.MaSoSinhVien} bị trùng lắp. Vui lòng kiểm tra bằng Ctrl + F trong file Excel");
            return false;
        }

        //Kiểm tra mã ca thi
        if (chiTietCaThi.MaCaThi <= 0)
        {
            Snackbar.Add($"Dòng {row}: Mã ca thi không hợp lệ. Vui lòng kiểm tra");
            return false;
        }

        return true;
    }

    private async Task OnClickSaveAsync()
    {
        Snackbar.Add(WAITING_MESSAGE, Severity.Info);
        if (await Insert_BatchAPI(examSessionDetails.Values.ToList()))
        {
            MudDialog?.Close(DialogResult.Ok(totalRecords));
        }
    }

    private string? NormalizeString(string? input)
    {
        return string.IsNullOrWhiteSpace(input) ? null : input.Trim();
    }


    private bool HasQualLengthStudentCode(string mssv)
    {
        if (numberOfStudentCode == -1)
            return true;
        return mssv.Length == numberOfStudentCode;
    }
    private bool HasAllNumberStudentCode(string mssv)
    {
        if (isStudentCodeAllNumber == false)
            return true;
        return HasOnlyNumber(mssv);
    }

    private bool HasSpecialCharacter(string text)
    {
        if (string.IsNullOrEmpty(text))
            return false;
        return Regex.IsMatch(text, @"[^a-zA-Z0-9\s]");
    }

    private bool HasOnlyNumber(string text)
    {
        return Regex.IsMatch(text, @"^\d+$");
    }

    private bool HasOnlyLetter(string text)
    {
        return Regex.IsMatch(text, @"^[a-zA-ZÀ-ỹà-ỹ\s]+$");
    }



    private async Task<bool> Insert_BatchAPI(List<ChiTietCaThiCreateBatchRequest> chiTietCaThis)
    {
        var result = await SenderAPI.PostAsync<List<SinhVienDto>>("api/chitietcathis/batch", chiTietCaThis);
        return result.Success;
    }
}
