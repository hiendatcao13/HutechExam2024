@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Request.DotThi
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 500px; max-height: auto; overflow: visible">
    <DialogContent>
        @if(tempDotThi != null)
        {
            <MudTextField Label="Tên đợt thi" Required InputType="InputType.Text" @bind-Value="tempDotThi.TenDotThi" />
            <MudSelect T="int" Label="Năm học" @bind-Value="nam_hoc" Clearable="true">
                @if (nam_hocs != null)
                {
                    foreach (var item in nam_hocs)
                    {
                        <MudSelectItem Value="item.Key">@item.Key - @item.Value</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudDatePicker Editable="true" Label="Thời gian bắt đầu" @bind-Date="tempDotThi.ThoiGianBatDau" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Dialog" />
            <MudDatePicker Editable="true" Label="Thời gian kết thúc" @bind-Date="tempDotThi.ThoiGianKetThuc" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Dialog" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if(IsEdit)
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickSua()" Color="Color.Success">Sửa</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Success">Thêm</MudButton>
        }

    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Inject] private ISenderAPI SenderAPI   { get; set; } = default!;

    [Parameter] public DotThiDto? DotThi { get; set; }

    // hoặc là thêm mới hoặc là chỉnh sửa
    [Parameter] public bool IsEdit { get; set; } = false;

    public Dictionary<int, int>? nam_hocs = [];

    private int nam_hoc = DateTime.Now.Year;


    private DotThiDto? tempDotThi;

    private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";
    private const string ERROR_NGAYKETTHUC = "Thời gian kết thúc không được nhỏ hơn thời gian bắt đầu";

    public void OnClickThoat()
    {
        MudDialog?.Cancel();
    }
    protected override async Task OnInitializedAsync()
    {
        HandleInput();
        await base.OnInitializedAsync();
    }
    private void HandleInput()
    {
        int nam_hien_tai = DateTime.Now.Year;

        for (int i = 0; i < 5; i++)
        {
            nam_hocs?.Add(nam_hien_tai + i, nam_hien_tai + i + 1);
        }
        if(IsEdit && DotThi != null)
        {
            tempDotThi = new DotThiDto(DotThi);
            return;
        }
        tempDotThi = new DotThiDto();
    }
    private async Task OnClickThem()
    {
        if (tempDotThi == null || tempDotThi.TenDotThi == null  || tempDotThi.ThoiGianBatDau == null || tempDotThi.ThoiGianKetThuc == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        if(!CheckValidDate())
        {
            return;
        }

        var result = await AddDotThiAPI(new DotThiCreateRequest{ 
            TenDotThi = tempDotThi.TenDotThi, 
            ThoiGianBatDau = (DateTime)tempDotThi.ThoiGianBatDau, 
            ThoiGianKetThuc = (DateTime)tempDotThi.ThoiGianKetThuc,
            NamHoc = nam_hoc
        });

        if (result != null && result.MaDotThi != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }
    private async Task OnClickSua()
    {
        if (tempDotThi == null || tempDotThi.TenDotThi == null || tempDotThi.ThoiGianBatDau == null || tempDotThi.ThoiGianKetThuc == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }

        if (!CheckValidDate())
        {
            return;
        }

        var result = await EditDotThiAPI(tempDotThi.MaDotThi, new DotThiUpdateRequest
            {
                TenDotThi = tempDotThi.TenDotThi,
                ThoiGianBatDau = (DateTime)tempDotThi.ThoiGianBatDau,
                ThoiGianKetThuc = (DateTime)tempDotThi.ThoiGianKetThuc,
                NamHoc = nam_hoc
            });

        if(result != null && result.MaDotThi != 0)
        {
			MudDialog?.Close(DialogResult.Ok(result));
        }

    }
    private bool CheckValidDate()
    {
        if(tempDotThi == null)
        {
            return false;
        }

        if (tempDotThi.ThoiGianBatDau > tempDotThi.ThoiGianKetThuc)
        {
            Snackbar.Add(ERROR_NGAYKETTHUC, Severity.Error);
            return false;
        }

        if ((tempDotThi.ThoiGianBatDau != null && tempDotThi.ThoiGianBatDau.Value.Year != nam_hoc) || (tempDotThi.ThoiGianKetThuc != null && tempDotThi.ThoiGianKetThuc.Value.Year != nam_hoc + 1))
        {
            Snackbar.Add($"Năm học bắt đầu phải {nam_hoc} và năm học kết thục phải {nam_hoc + 1}", Severity.Error);
            return false;
        }

        return true;
    }


    private async Task<DotThiDto?> AddDotThiAPI(DotThiCreateRequest dotThi)
    {
        var response = await SenderAPI.PostAsync<DotThiDto>($"api/dotthis", dotThi);
        return (response.Success) ? response.Data : null;
    }
    private async Task<DotThiDto?> EditDotThiAPI(int ma_dot_thi, DotThiUpdateRequest dotThi)
    {
        var response = await SenderAPI.PutAsync<DotThiDto>($"api/dotthis/{ma_dot_thi}", dotThi);
        return (response.Success) ? response.Data : null;
    }

}