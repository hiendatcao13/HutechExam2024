@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Request.ChiTietDotThi
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="min-width: 350px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudText>Tên đợt thi: <span class="title-text">@TenDotThi</span></MudText>
        <MudGrid>
            <MudItem xs="9">
                <MudSelect T="MonHocDto" Label="Môn thi" Value="selectedMonHoc" Clearable="true" ValueChanged="async (value) => await OnValueChangeMonHoc(value)">
                    @if (monHocs != null)
                    {
                        foreach (var item in monHocs)
                        {
                            <MudSelectItem Value="item">@item.TenMonHoc</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3" Style="align-content: end;">
                <MudButtonGroup Style="zoom: 0.7">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="async () => await OnClickThemMonThi()" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="async () => await OnClickSuaMonThi()"/>
                </MudButtonGroup>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="9">
                <MudSelect T="LopAoDto" Label="Phòng thi (theo môn thi)" @bind-Value="selectedLopAo" Clearable="true">
                    @if (lopAos != null)
                    {
                        foreach (var item in lopAos)
                        {
                            <MudSelectItem Value="item">@item.TenLopAo</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="2" Style="align-content:end;">
                <MudButtonGroup Style="zoom: 0.7;">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="async () => await OnClickThemLopAo()" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="async () => await OnClickSuaLopAo()"/>
                </MudButtonGroup>
            </MudItem>
        </MudGrid>

        <MudSelect T="int" Label="Lần thi" @bind-Value="selectedLanThi" Clearable="true">
            @foreach (var item in lanThis)
            {
                <MudSelectItem Value="item">Lần @item</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if (IsEdit)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="async () => await OnClickSuaCTDT()">Sửa</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="async () => await OnClickThemCTDT()">Thêm</MudButton>
        }

    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
    .tools{
    align-content: end;
    }

    .title-text {
    font-weight: bold;
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    [Parameter] public string? TenDotThi { get; set; }

    [Parameter] public int? MaDotThi { get; set; }

    [Parameter] public ChiTietDotThiDto? ChiTietDotThi { get; set; }

    // hoặc là thêm mới hoặc là chỉnh sửa
    [Parameter] public bool IsEdit { get; set; } = false;

    private MonHocDto? selectedMonHoc;

    private LopAoDto? selectedLopAo;

    private int selectedLanThi = 1;

    private List<MonHocDto>? monHocs;

    private List<LopAoDto>? lopAos;

    private List<int> lanThis = [1, 2, 3, 4, 5];

    private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";

    public void OnClickThoat()
    {
        MudDialog?.Close();
    }

    protected override async Task OnInitializedAsync()
    {
        await HandleInput();
        await base.OnInitializedAsync();
    }

    private async Task OnValueChangeMonHoc(MonHocDto monHoc){
        if(selectedMonHoc == monHoc)
            return;
        selectedMonHoc = monHoc;
        selectedLopAo = null;
        lopAos = await LopAo_SelectedByMonHocAPI(selectedMonHoc?.MaMonHoc ?? -1);
    }

    private async Task HandleInput()
    {
        monHocs = await GetAllMonHocAPI();
        if (IsEdit)
        {
            selectedMonHoc = ChiTietDotThi?.MaLopAoNavigation.MaMonHocNavigation;
            lopAos = await LopAo_SelectedByMonHocAPI(selectedMonHoc?.MaMonHoc ?? -1);
            selectedLopAo = ChiTietDotThi?.MaLopAoNavigation;
            selectedLanThi = ChiTietDotThi?.LanThi ?? 1;
        }
    }

    private async Task OnClickThemCTDT(){
        if (selectedMonHoc == null || selectedLopAo == null || selectedLanThi == 0)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }

        var result = await InsertCTDTAPI( new ChiTietDotThiCreateRequest { 
            MaDotThi = MaDotThi ?? -1, 
            TenChiTietDotThi = TenDotThi ?? string.Empty, 
            MaLopAo = selectedLopAo.MaLopAo, 
            LanThi = selectedLanThi
        });

        if (result != null && result.MaChiTietDotThi != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }

    private async Task OnClickSuaCTDT()
    {
        if (selectedMonHoc == null || selectedLopAo == null || selectedLanThi == 0)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        var result = await UpdateCTDTAPI(ChiTietDotThi?.MaChiTietDotThi ?? -1, new ChiTietDotThiUpdateRequest
            {
                MaDotThi = MaDotThi ?? -1,
                TenChiTietDotThi = TenDotThi ?? string.Empty,
                MaLopAo = selectedLopAo.MaLopAo,
                LanThi = selectedLanThi
            });

        if (result != null && result.MaChiTietDotThi != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }

    private async Task OnClickThemMonThi()
    {
        var result = await OpenMonHocDialog(false);
        if(result != null && !result.Canceled && monHocs != null && result.Data != null)
        {
            var monHoc = (MonHocDto)result.Data;
            if(monHoc != null){
                monHocs.Add(monHoc);
                selectedMonHoc = monHoc;
            }
        }
    }

    private async Task OnClickSuaMonThi()
    {
        var result = await OpenMonHocDialog(true);
        if (result != null && !result.Canceled && monHocs != null && result.Data != null)
        {
            var monHoc = (MonHocDto)result.Data;
            if (monHoc != null && selectedMonHoc != null)
            {
                int index = monHocs.FindIndex(m => m.MaMonHoc == selectedMonHoc.MaMonHoc);
                if(index != -1)
                {
                    monHocs[index] = monHoc;
                    selectedMonHoc = monHoc;
                }
            }
        }
    }

    private async Task OnClickThemLopAo()
    {
        if (selectedMonHoc == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        var result = await OpenLopAoDialog(false);
        if(result != null && result.Data != null && lopAos != null && !result.Canceled){
            var lopAo = (LopAoDto)result.Data;
            if (lopAo != null)
            {
                lopAos.Add(lopAo);
                selectedLopAo = lopAo;
            }
        }
    }

    private async Task OnClickSuaLopAo()
    {
        if (selectedMonHoc == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        var result = await OpenLopAoDialog(true);
        if (result != null && result.Data != null && lopAos != null && !result.Canceled)
        {
            var lopAo = (LopAoDto)result.Data;
            if (lopAo != null && selectedLopAo != null)
            {
                int index = lopAos.FindIndex(l => l.MaLopAo == selectedLopAo.MaLopAo);
                if(index != -1)
                {
                    lopAos[index] = lopAo;
                    selectedLopAo = lopAo;
                }
            }
        }
    }

    private async Task<DialogResult?> OpenMonHocDialog(bool isEdit){
        var parameters = new DialogParameters<MonHocDialog> 
        { 
            { x => x.IsEdit, isEdit},
            { x => x.MonHoc, selectedMonHoc }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };
        var dialog = await Dialog.ShowAsync<MonHocDialog>((isEdit) ? "SỬA MÔN HỌC" : "THÊM MÔN HỌC", parameters, options);
        return await dialog.Result;
    }

    private async Task<DialogResult?> OpenLopAoDialog(bool isEdit)
    {
        var parameters = new DialogParameters<LopAoDialog>
        {
            { x => x.IsEdit, isEdit},
            { x => x.LopAo, selectedLopAo },
            { x => x.MaMonHoc, selectedMonHoc?.MaMonHoc ?? -1 }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };
        var dialog = await Dialog.ShowAsync<LopAoDialog>((isEdit) ? "SỬA PHÒNG THI" : "THÊM PHÒNG THI", parameters, options);
        return await dialog.Result;
    }



    private async Task<List<MonHocDto>?> GetAllMonHocAPI()
    {
        var response = await SenderAPI.GetAsync<List<MonHocDto>>("api/monhocs");
        return (response.Success) ? response.Data : null;
    }

    private async Task<List<LopAoDto>?> LopAo_SelectedByMonHocAPI(int ma_mon_hoc)
    {
        var response = await SenderAPI.GetAsync<List<LopAoDto>>($"api/lopaos/filter-by-monhoc?maMonHoc={ma_mon_hoc}");
        return (response.Success) ? response.Data : null;
    }

    private async Task<ChiTietDotThiDto?> InsertCTDTAPI(ChiTietDotThiCreateRequest chiTietDotThi){
        var response = await SenderAPI.PostAsync<ChiTietDotThiDto>("api/chitietdotthis", chiTietDotThi);
        return (response.Success) ? response.Data : null;
    }

    private async Task<ChiTietDotThiDto?> UpdateCTDTAPI(int ma_chi_tiet_dot_thi, ChiTietDotThiUpdateRequest chiTietDotThi){
        var response = await SenderAPI.PutAsync<ChiTietDotThiDto>($"api/chitietdotthis/{ma_chi_tiet_dot_thi}", chiTietDotThi);
        return (response.Success) ? response.Data : null;
    }
}