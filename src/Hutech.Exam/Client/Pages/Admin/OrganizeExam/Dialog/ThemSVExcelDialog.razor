@using Hutech.Exam.Client.Components.Dialogs
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="min-width: 700px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudText>@((MarkupString)(MESSAGE))</MudText>
        <Microsoft.AspNetCore.Components.Forms.InputFile class="form-control-sm w-70" OnChange="HandleFileUpload" accept=".xls,.xlsx">
        </Microsoft.AspNetCore.Components.Forms.InputFile>
        <MudText Color="Color.Success">Số dòng được ghi nhận: @so_dong_ghi_nhan</MudText>

        <MudTextField Label="SL kí tự quy định MSSV" Style="width:200px" @bind-Value="isMSSVNumber" Typo="Typo.body2" Color="Color.Default" InputType="InputType.Number"/>

        <MudCheckBox T="bool" Label="MSSV chỉ chứa số" Value="isMMSSVAllNumber" Color="Color.Dark" ValueChanged="OnClickCheckboxAllMSSV" />
        <MudCheckBox T="bool" Label="Bỏ qua lớp" Color="Color.Dark" Value="canNullLop" ValueChanged="OnClickCheckboxNullLop" />
        <MudCheckBox T="bool" Label="Bỏ qua giới tính" Color="Color.Dark" Value="canNullSex" ValueChanged="OnClickCheckboxNullSex" />
        <MudCheckBox T="bool" Label="Tự động bỏ qua SV đã tồn tại trong ca thi hoặc trùng lặp (lấy phần tử cuối)" Value="isSkipSinhVien" Color="Color.Dark" ValueChanged="OnClickCheckboxSkipSinhVien" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="IsValidData" Color="Color.Default">Tải lại</MudButton>
        @if (isReadyToSave)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success">Lưu</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="IsValidData">Kiểm tra</MudButton>
        }
    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    [Inject] public HttpClient Http { get; set; } = default!;
    [Parameter, EditorRequired] public CaThiDto CaThi { get; set; } = default!; // thông tin ca thi

    List<string>? MSSVs { get; set; } // lưu các giá trị MSSV
    int so_dong_ghi_nhan = 0; // số dòng được ghi nhận

    bool isReadyToSave = false;
    List<SinhVienDto> sinhViens = new();


    //mssv
    int isMSSVNumber = -1; // tổng số kí tự MSSV
    bool isMMSSVAllNumber = false; // chỉ chứa toàn số

    //lop
    bool canNullLop = false; //bỏ qua lớp

    //gioi tinh
    bool canNullSex = false; //bỏ qua gioi tinh

    //trùng lặp
    bool isSkipSinhVien = false; // bỏ qua các sinh viên đã tồn tại trong ca thi hoặc trùng lặp

    HashSet<string> null_property = new(); // danh sách các thuộc tính null
    HashSet<string> special_characters = new(); // danh sách các kí tự đặc biệt
    HashSet<string> error_length_mssv = new(); // danh sách các lỗi MSSV không khớp kí tự
    HashSet<string> error_allnumber_mssv = new(); // danh sách các lỗi MSSV không chỉ chứa số
    HashSet<string> error_doubles = new(); // danh sách các lỗi MSSV trùng lặp
    HashSet<string> error_exists = new(); // danh sách các lỗi MSSV đã tồn tại trong ca thi



    // check trùng lặp, tồn tại
    // mssv không chứa kí tự đặc biệt (lựa chọn) chỉ toàn số, đặc biệt mssv chứa bao nhiêu kí tự
    // họ và tên không chứa số và kí tự đặc biệt (lựa chọn)
    // lớp không chứa số và kí tự đặc biệt (lựa chọn) có thể bỏ qua
    // giói tính chỉ 0 và 1 (lựa chọn) có thể bỏ qua
    const string MESSAGE = "Bảng sheet theo trình tự: <b style='color:red;'>[MSSV], [HoVaTenLot], [Ten], [Lop], [GioiTinh] 0(Nam)/1(Nữ)</b>";
    const string NOTE = "Lưu ý: File excel phải có tiêu đề HEADING, dữ liệu đọc bắt đầu từ ô A2 tại sheet 1. \nFile tối đa 5MB. MSSV bắt buộc không được rỗng.\nVui lòng liên hệ phòng đào tạo để cập nhật thông tin đầy đủ cho thí sinh và chắc chắn các đề thi phải được tạo sẵn trước đó.";
    const string NOT_FORMAT_EXCEL = "Định dạng file không phải Excel hoặc file rỗng";
    const string ALREADYTOSAVE = "Sẵn sàng để lưu";

    protected override async Task OnInitializedAsync()
    {
        await HandleInput();
        await base.OnInitializedAsync();
    }
    private async Task HandleInput()
    {
        MSSVs = await MSSVs_SelectBy_MaCaThiAPI(CaThi.MaCaThi);
    }
    private void OnClickThoat()
    {
        MudDialog?.Cancel();
    }


    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        ClearAllData(true);

        var file = e.File;
        if (file is null || !(file.ContentType == "application/vnd.ms-excel" || file.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") ||
            !(file.Name.EndsWith(".xls", StringComparison.OrdinalIgnoreCase) || file.Name.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase)))
        {
            Snackbar.Add(NOT_FORMAT_EXCEL, Severity.Error);
            return;
        }

        using var memoryStream = new MemoryStream();
        await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(memoryStream); // 3 MB
        memoryStream.Position = 0;

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using var package = new ExcelPackage(memoryStream);
        var worksheet = package.Workbook.Worksheets[0]; // Lấy sheet đầu tiên
        var rowCount = worksheet.Dimension.End.Row;       // Số dòng
        so_dong_ghi_nhan = rowCount - 1; // Bỏ qua dòng tiêu đề

        for (int row = 2; row <= rowCount; row++) // Bỏ qua dòng tiêu đề
        {
            SinhVienDto sinhVien = new SinhVienDto();
            sinhVien.MaSinhVien = row; // lưu tạm thời mã sinh viên thành dòng bị lỗi
            sinhVien.MaSoSinhVien = worksheet.Cells[row, 1].Text?.Trim();
            sinhVien.HoVaTenLot = worksheet.Cells[row, 2].Text?.Trim();
            sinhVien.TenSinhVien = worksheet.Cells[row, 3].Text?.Trim();
            sinhVien.DiaChi = worksheet.Cells[row, 4].Text?.Trim().ToUpper(); // lớp tạm thời lưu tại địa chỉ, viết hoa toàn bộ
            var gioiTinhText = worksheet.Cells[row, 5].Text?.Trim();
            sinhVien.GioiTinh = (!string.IsNullOrEmpty(gioiTinhText) && (gioiTinhText == "1" || gioiTinhText == "0")) ? short.Parse(gioiTinhText) : null;

            //Kiểm tra trùng lặp
            bool flag = true;
            SinhVienDto? temp = sinhViens.Where(p => p.MaSoSinhVien == sinhVien.MaSoSinhVien).FirstOrDefault();
            if (temp != null)
            {
                if (isSkipSinhVien)
                    sinhViens.Remove(temp);
                else
                {
                    error_doubles.Add($"[{temp.MaSinhVien}] - [{sinhVien.MaSinhVien}]");
                }
            }

            //Kiểm tra có tồn tại trong ca thi chưa
            bool check = MSSVs?.Contains(sinhVien.MaSoSinhVien ?? "") ?? false;
            if (check)
            {
                if (!isSkipSinhVien){
                    flag = false;
                    error_exists.Add($"[{sinhVien.MaSinhVien}]");
                }
            }
            if(flag)
                sinhViens.Add(sinhVien);
        }
    }
    private async void IsValidData()
    {
        ClearAllData(false);
        Check();
        int count = null_property.Count + special_characters.Count + error_length_mssv.Count + error_allnumber_mssv.Count;
        if (count > 0)
        {
            // xuất các lỗi cho người dùng
            isReadyToSave = false;
            await OpenWarningDialog(Message());
            return;
        }
        isReadyToSave = true;
        Snackbar.Add(ALREADYTOSAVE, Severity.Success);
    }
    private string Message()
    {
        StringBuilder sb = new StringBuilder();
        if (null_property.Count > 0)
        {
            sb.Append("CÁC THUỘC TÍNH NULL: ");
            foreach (var item in null_property)
            {
                sb.Append(item);
            }
        }
        if (special_characters.Count > 0)
        {
            sb.Append("CÁC KÍ TỰ ĐẶC BIỆT: ");
            foreach (var item in special_characters)
            {
                sb.Append(item);
            }
        }
        if (error_length_mssv.Count > 0)
        {
            sb.Append("MSSV KHÔNG KHỚP SỐ LƯỢNG: ");
            foreach (var item in error_length_mssv)
            {
                sb.Append(item);
            }
        }
        if (error_allnumber_mssv.Count > 0)
        {
            sb.Append("MSSV KHÔNG CHỈ CHỨA SỐ: ");
            foreach (var item in error_allnumber_mssv)
            {
                sb.Append(item);
            }
        }
        if (error_doubles.Count > 0)
        {
            sb.Append("MSSV TRÙNG LẶP: ");
            foreach (var item in error_doubles)
            {
                sb.Append(item);
            }
        }
        if (error_exists.Count > 0)
        {
            sb.Append("MSSV ĐÃ TỒN TẠI TRONG CA THI: ");
            foreach (var item in error_exists)
            {
                sb.Append(item);
            }
        }
        return sb.ToString();

    }
    private async Task OpenWarningDialog(string text)
    {
        var parameters = new DialogParameters<Simple_Dialog>
        {
            { x => x.ContentText, text},
            { x => x.ButtonText, "OK" },
            { x => x.Color, Color.Default },
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };

        await Dialog.ShowAsync<Simple_Dialog>
            ("Thông báo", parameters, options);
        StateHasChanged();
    }



    private void Check()
    {
        //check null tất cả
        CheckAllNull();
        foreach (var item in sinhViens)
        {

            //check xuất hiện kí tự đặc biệt
            CheckSpecialCharacter(item);

            // check mssv tổng số kí tự
            if (!HasQualLengthMSSV(item.MaSoSinhVien ?? ""))
            {
                error_length_mssv.Add($"[{item.MaSinhVien}]");
            }

            //check mssv chỉ chứa toàn số
            if (!HasAllNumberMSSV(item.MaSoSinhVien ?? ""))
            {
                error_allnumber_mssv.Add($"[{item.MaSinhVien}]");
            }
        }
    }
    private void CheckAllNull()
    {
        foreach (var item in sinhViens)
        {
            if (string.IsNullOrEmpty(item.MaSoSinhVien))
                null_property.Add($"[{item.MaSinhVien}]: MSSV ");
            if (string.IsNullOrEmpty(item.HoVaTenLot))
                null_property.Add($"[{item.MaSinhVien}]: Họ và tên lót ");
            if (string.IsNullOrEmpty(item.TenSinhVien))
                null_property.Add($"[{item.MaSinhVien}]: Tên sinh viên ");
            if (!canNullLop && string.IsNullOrEmpty(item.DiaChi))
                null_property.Add($"[{item.MaSinhVien}]: Lớp ");
            if (!canNullSex && string.IsNullOrEmpty(item.GioiTinh.ToString()))
                null_property.Add($"[{item.MaSinhVien}]: Giới tính ");
        }
    }
    private void CheckSpecialCharacter(SinhVienDto sinhVien)
    {
        if (HasSpecialCharacter(sinhVien.MaSoSinhVien ?? ""))
        {
            special_characters.Add($"[{sinhVien.MaSinhVien}]: MSSV ");
        }
        if (HasSpecialCharacter(sinhVien.HoVaTenLot ?? "") || HasSpecialCharacter(sinhVien.TenSinhVien ?? "") || !HasOnlyLetter(sinhVien.HoVaTenLot ?? "") || !HasOnlyLetter(sinhVien.TenSinhVien ?? ""))
        {
            special_characters.Add($"[{sinhVien.MaSinhVien}]: Họ và tên lót ");
        }
        if (!canNullLop && HasSpecialCharacter(sinhVien.DiaChi ?? ""))
        {
            special_characters.Add($"[{sinhVien.MaSinhVien}]: Lớp ");
        }
        if (!canNullSex && HasSpecialCharacter(sinhVien.GioiTinh.ToString() ?? ""))
        {
            special_characters.Add($"[{sinhVien.MaSinhVien}]: Giới tính ");
        }
    }
    private bool HasQualLengthMSSV(string mssv)
    {
        if (isMSSVNumber == -1)
            return true;
        return mssv.Length == isMSSVNumber;
    }
    private bool HasAllNumberMSSV(string mssv)
    {
        if (isMMSSVAllNumber == false)
            return true;
        return HasOnlyNumber(mssv);
    }

    private bool HasSpecialCharacter(string text)
    {
        if (string.IsNullOrEmpty(text))
            return false;
        return Regex.IsMatch(text, @"[^a-zA-Z0-9\s]");
    }
    private bool HasOnlyNumber(string text)
    {
        return Regex.IsMatch(text, @"^\d+$");
    }
    private bool HasOnlyLetter(string text)
    {
        return Regex.IsMatch(text, @"^[a-zA-ZÀ-ỹà-ỹ\s]+$");
    }
    private void OnClickCheckboxAllMSSV(bool checkbox)
    {
        isReadyToSave = false;
        isMMSSVAllNumber = checkbox;
    }
    private void OnClickCheckboxNullLop(bool checkbox)
    {
        isReadyToSave = false;
        canNullLop = checkbox;
    }
    private void OnClickCheckboxNullSex(bool checkbox)
    {
        isReadyToSave = false;
        canNullSex = checkbox;
    }
    private void OnClickCheckboxSkipSinhVien(bool checkbox)
    {
        isReadyToSave = false;
        isSkipSinhVien = checkbox;
        // thực chất các dữ liệu đã skip trước đó nhưng nếu không bật thì vẫn là lỗi
        if(isSkipSinhVien)
        {
            error_exists.Clear();
            error_doubles.Clear();
        }
    }

    private void ClearAllData(bool isUpload)
    {
        null_property.Clear();
        special_characters.Clear();
        error_length_mssv.Clear();
        error_allnumber_mssv.Clear();
        isReadyToSave = false;
        if(!isUpload)
        {
            return;
        }
        sinhViens.Clear();
        error_doubles.Clear();
        error_exists.Clear();
    }



    private async Task<List<string>?> MSSVs_SelectBy_MaCaThiAPI(int maCaThi)
    {
        // TODO: coi lại hàm API này, tạm đã bị xóa sổ
        var response = await Http.GetAsync($"api/chitietcathis/SelectBy_MaCaThi_MSSV?ma_ca_thi={maCaThi}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<string>?>();
        }
        return null;
    }
}

