@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Custom
@using Hutech.Exam.Shared.DTO.Request.CaThi
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs="4" Style="align-content: center"><MudText>Tên Đợt thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@ExamBatchName</span></MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Môn thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@SubjectName</span></MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Phòng thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@ExamRoomName</span></MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Lần thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@AttemptNumber</span></MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Mã đề:</MudText></MudItem>
            <MudItem xs="8">
                <MudSelect T="DeThiDto" Value="selectedExam" Label="Đề thi" Required ValueChanged="(value) => OnChangeValueExam(value)">
                    @if (exams != null)
                    {
                        foreach (var item in exams)
                        {
                                    <MudSelectItem Value="@item">[@item.MaDeThi] @item.TenDeThi</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>SL thí sinh:</MudText></MudItem>
            <MudItem xs="8"><MudText>@ExamSession?.TongSV</MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Số lượng dọc: </MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Số lượng dọc" Required InputType="InputType.Number" @bind-Value="colNumber"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Số lượng ngang: </MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Số lượng hàng" Required InputType="InputType.Number" @bind-Value="rowNumber"></MudTextField></MudItem>

            <MudItem xs="6"><MudSwitch Label="Xếp theo MSSV" T="bool" Color="Color.Success" Value="isSortExamCode" ValueChanged="OnValueChangeSortExamCode"></MudSwitch></MudItem>
            <MudItem xs="6"><MudSwitch Label="Xếp theo Tên" T="bool" Color="Color.Success" Value="isSortName" ValueChanged="OnValueChangeSortName"></MudSwitch></MudItem>
        </MudGrid>
        <MudText><i><small style="color: red; ">@ALERT_TITLE</small></i></MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickExit" Color="Color.Default">Thoát</MudButton>
        @if (!isSame)
        {
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="async () => await OnClickEditAsync()">Cập nhật</MudButton>
        }
        else
        {
                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="true">Cập nhật</MudButton>
        }
    </DialogActions>
</MudDialog>
<style>
    .title-text {
    font-weight: bold;
    }
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
</style>


@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    [Parameter] public int? ExamBatchDetailId { get; set; }

    [Parameter] public string? ExamBatchName { get; set; }

    [Parameter] public string? ExamRoomName { get; set; }

    [Parameter] public string? SubjectName { get; set; }

    [Parameter] public int? AttemptNumber { get; set; }

    [Parameter] public CaThiDto? ExamSession { get; set; }

    private DeThiDto? selectedExam;

    private List<DeThiDto>? exams;

    private bool isSame = true; // nếu người dùng không cập nhật đề mới

    private int rowNumber, colNumber, totalNumberOfStudent;

    private bool isSortExamCode = true, isSortName = false;

    private const string ALERT_TITLE = "Lưu ý: nếu các thí sinh trong ca thi đã được gắn đề, việc cập nhật đề thi lại cho ca thi sẽ reset lại toàn bộ và gán đề thi mới";
    private const string ERROR_FORMAT = "Không thể gán đề thi cho các thí sinh khi số lượng ngang x dọc bé hơn tổng thí sinh";
    private const string NO_SHUFFLEEXAM = "Hiện đề thi chưa được tạo các đề hoán vị. Vui lòng tạo trước";
    private const string NO_EXAM = "Đề thi này hiện chưa tạo ra các đề hoán vị. Vui lòng kiểm tra và tạo mã đề tại trang tổ chức đề thi";

    private void OnClickExit()
    {
        MudDialog?.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        await HandleInputAsync();
        await base.OnInitializedAsync();
    }

    private async Task HandleInputAsync()
    {
        exams = await Exams_GetAll_API();
        // thêm 1 trường null
        exams?.Insert(0, new DeThiDto() { MaDeThi = -1, TenDeThi = "Chưa có mã đề" });

        if (ExamSession != null && ExamSession.MaDeThi == -1)
        {
            selectedExam = exams?.FirstOrDefault(x => x.MaDeThi == -1);
            totalNumberOfStudent = ExamSession.TongSV;
        }
        else
        {
            selectedExam = await Exam_SelectOneAPI(ExamSession?.MaDeThi ?? -1);
        }

    }
    private void OnChangeValueExam(DeThiDto deThi)
    {
        selectedExam = deThi;
        isSame = (ExamSession != null && deThi.MaDeThi == ExamSession.MaDeThi);
    }

    private async Task OnClickEditAsync()
    {
        if (!ValidateForm())
        {
            return;
        }

        if (ExamSession != null && ExamBatchDetailId != null && selectedExam != null)
        {
            var listShuffleExams = await ArrageExamForStudentAsync();
            if (listShuffleExams.Count == 0)
            {
                return;
            }

            var result = await UpdateExam(ExamSession.MaCaThi, selectedExam.MaDeThi, isSortExamCode, listShuffleExams);

            if (result)
            {
                MudDialog?.Close(DialogResult.Ok(selectedExam.MaDeThi));
            }
        }
    }

    private bool ValidateForm()
    {
        if (rowNumber * colNumber < totalNumberOfStudent)
        {
            Snackbar.Add(ERROR_FORMAT, Severity.Error);
            return false;
        }

        if (selectedExam != null && (selectedExam.TongSoDeHoanVi == null || selectedExam.TongSoDeHoanVi == 0))
        {
            Snackbar.Add(NO_SHUFFLEEXAM, Severity.Error);
            return false;
        }

        return true;
    }

    private async Task<List<long>> ArrageExamForStudentAsync()
    {
        var listExamCodes = await GetAllShuffleExamCodeAsync();

        if (listExamCodes.Count == 0)
        {
            Snackbar.Add(NO_EXAM, Severity.Error);
            return [];
        }
        int totalShuffleExam = listExamCodes.Count;

        List<long> listExamCodeForStudents = [];
        int studentCounter = 0;
        for (int i = 0; i < rowNumber; i++)
        {
            for (int j = 0; j < colNumber; j++)
            {
                if (studentCounter >= totalNumberOfStudent)
                {
                    break;
                }

                listExamCodeForStudents.Add(listExamCodes[(i + j) % totalShuffleExam]);
                studentCounter++;
            }
        }

        return listExamCodeForStudents;
    }

    private async Task<List<long>> GetAllShuffleExamCodeAsync()
    {
        var result = await ShuffleExam_SelectBy_ExamAPI(selectedExam!.MaDeThi);

        return result.Select(_ => _.MaDeHv).ToList();
    }

    private void OnValueChangeSortName(bool value)
    {
        isSortName = value;
        isSortExamCode = !isSortName;
    }

    private void OnValueChangeSortExamCode(bool value)
    {
        isSortExamCode = value;
        isSortName = !isSortExamCode;
    }

    private async Task<List<DeThiDto>?> Exams_GetAll_API()
    {
        var response = await SenderAPI.GetAsync<List<DeThiDto>>("api/dethis");
        return (response.Success) ? response.Data : null;
    }

    private async Task<DeThiDto?> Exam_SelectOneAPI(int ma_de_thi)
    {
        var response = await SenderAPI.GetAsync<DeThiDto>($"api/dethis/{ma_de_thi}");
        return (response.Success) ? response.Data : null;
    }

    private async Task<List<DeThiHoanViDto>> ShuffleExam_SelectBy_ExamAPI(int maDeThi)
    {
        var response = await SenderAPI.GetAsync<List<DeThiHoanViDto>>($"api/dethihoanvis/filter-by-dethi?maDeThi={maDeThi}");
        return (response.Success && response.Data != null) ? response.Data : [];
    }

    private async Task<bool> UpdateExam(int examSessionId, int examId, bool isOrderExamCode, List<long> listShuffleExam)
    {
        var response = await SenderAPI.PatchAsync<bool>($"api/cathis/{examSessionId}/update-dethi?maDeThi={examId}&isOrderMSSV={isOrderExamCode}", listShuffleExam);
        return response.Success;
    }
}
