@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Custom
@using Hutech.Exam.Shared.DTO.Request.CaThi
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs="4"><MudText>Tên Đợt thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@ExamBatchName</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Môn thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@SubjectName</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Phòng thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@ExamRoomName</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Lần thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@AttemptNumber</span></MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Mã đề:</MudText></MudItem>
            <MudItem xs="8">
                <MudSelect T="DeThiDto" Value="selectedExam" Label="Đề thi" Required ValueChanged="(value) => OnChangeValueExam(value)">
                    @if (exams != null)
                    {
                        foreach (var item in exams)
                        {
                            <MudSelectItem Value="@item">[@item.MaDeThi] @item.TenDeThi</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
        <MudText><i><small style="color: red; ">@ALERT_TITLE</small></i></MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickExit" Color="Color.Default">Thoát</MudButton>
        @if(!isSame)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="async () => await OnClickEditAsync()">Cập nhật</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="true">Cập nhật</MudButton>
        }
    </DialogActions>
</MudDialog>
<style>
    .title-text {
        font-weight: bold;
    }
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
</style>


@code{
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    [Parameter] public int? ExamBatchDetailId { get; set; }

    [Parameter] public string? ExamBatchName { get; set; }

    [Parameter] public string? ExamRoomName { get; set; }

    [Parameter] public string? SubjectName { get; set; }

    [Parameter] public int? AttemptNumber { get; set; }

    [Parameter] public CaThiDto? ExamSession { get; set; }

    private const string ALERT_TITLE = "Lưu ý: nếu các thí sinh trong ca thi đã được gắn đề, việc cập nhật đề thi lại cho ca thi sẽ xảy ra lỗi không mong muốn. Vui lòng reset toàn bộ đề thi của thí sinh về mặc định và cập nhật lại đề cho thí sinh.";

    private DeThiDto? selectedExam;

    private List<DeThiDto>? exams;

    private bool isSame = true; // nếu người dùng không cập nhật đề mới

    private void OnClickExit()
    {
        MudDialog?.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        await HandleInputAsync();
        await base.OnInitializedAsync();
    }

    private async Task HandleInputAsync()
    {
        exams = await Exams_GetAll_API();
        // thêm 1 trường null
        exams?.Insert(0, new DeThiDto() { MaDeThi = -1, TenDeThi = "Chưa có mã đề" });

        if(ExamSession != null && ExamSession.MaDeThi == -1){
            selectedExam = exams?.FirstOrDefault(x => x.MaDeThi == -1);
        }
        else{
            selectedExam = await Exam_SelectOneAPI(ExamSession?.MaDeThi ?? -1);
        }

    }
    private void OnChangeValueExam(DeThiDto deThi)
    {
        selectedExam = deThi;
        isSame = (ExamSession != null && deThi.MaDeThi == ExamSession.MaDeThi);
    }

    private async Task OnClickEditAsync()
    {
        if(ExamSession != null && ExamBatchDetailId != null && selectedExam != null){
            var result = await ExamSession_UpdateAPI(ExamSession.MaCaThi, new CaThiUpdateRequest { 
                TenCaThi = ExamSession.TenCaThi ?? String.Empty, 
                MaChiTietDotThi = (int)ExamBatchDetailId, 
                ThoiGianBatDau = ExamSession.ThoiGianBatDau, 
                MaDeThi = selectedExam.MaDeThi, 
                ThoiGianThi = ExamSession.ThoiGianThi
            });

            if(result != null && result.MaCaThi != 0){
                MudDialog?.Close(DialogResult.Ok(result));
            }
        }
    }

    private async Task<List<DeThiDto>?> Exams_GetAll_API()
    {
        var response = await SenderAPI.GetAsync<List<DeThiDto>>("api/dethis");
        return (response.Success) ? response.Data : null;
    }

    private async Task<CaThiDto?> ExamSession_UpdateAPI(int ma_ca_thi, CaThiUpdateRequest caThi)
    {
        var json = JsonSerializer.Serialize(caThi);
        var response = await SenderAPI.PutAsync<CaThiDto>($"api/cathis/{ma_ca_thi}", new StringContent(json, Encoding.UTF8, "application/json"));
        return (response.Success) ? response.Data : null;
    }

    private async Task<DeThiDto?> Exam_SelectOneAPI(int ma_de_thi)
    {
        var response = await SenderAPI.GetAsync<DeThiDto>($"api/dethis/{ma_de_thi}");
        return (response.Success) ? response.Data : null;
    }
}
