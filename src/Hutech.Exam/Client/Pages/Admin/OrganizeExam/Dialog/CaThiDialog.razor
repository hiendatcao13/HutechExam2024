@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Custom
@using Hutech.Exam.Shared.DTO.Request.CaThi
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 450px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs="4"><MudText>Tên Đợt thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@TenDotThi</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Môn thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@TenMonThi</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Phòng thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@TenLopAo</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Lần thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@LanThi</span></MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Tên Ca thi:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Tên Ca thi" Required InputType="InputType.Text" @bind-Value="ten_ca_thi"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Ngày thi:</MudText></MudItem>
            <MudItem xs="8">
                <MudDatePicker Editable="true" Label="Ngày thi" @bind-Date="ngay_thi" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Dialog" />
            </MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Thời gian:</MudText></MudItem>
            <MudItem xs="8">
                <MudTimePicker Editable="true" Label="Thời gian" @bind-Time="thoi_gian" TimeFormat="HH:mm" PickerVariant="PickerVariant.Dialog" />
            </MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Mã đề:</MudText></MudItem>
            <MudItem xs="8">
                <MudSelect T="DeThiDto" @bind-Value="selectDeThi" Label="Đề thi" Required ReadOnly="true" HelperText="Tùy chỉnh mã đề không khả dụng">
                    @if (deThis != null)
                    {
                        foreach (var item in deThis)
                        {
                            <MudSelectItem Value="@item">[@item.MaDeThi] @item.TenDeThi</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Thời lượng:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Required InputType="InputType.Number" @bind-Value="thoi_luong_thi"></MudTextField></MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if (!IsEdit)
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Success">Thêm</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickSua()" Color="Color.Success">Sửa</MudButton>
        }

    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }

    .title-text{
    font-weight: bold;
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

	[Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    [Parameter] public int? MaChiTietDotThi { get; set; }

    [Parameter] public string? TenDotThi { get; set; }

    [Parameter] public string? TenLopAo { get; set; }

    [Parameter] public string? TenMonThi { get; set; }

    [Parameter] public int? LanThi { get; set; }

    [Parameter] public bool IsEdit { get; set; } = false;

    [Parameter] public CaThiDto? CaThi { get; set; }


    private string? ten_ca_thi;

    private DateTime? ngay_thi = DateTime.Now;

    private TimeSpan? thoi_gian = new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, 0);

    private int? thoi_luong_thi;

    private DeThiDto? selectDeThi;

    private List<DeThiDto>? deThis;


    private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";

    protected override async Task OnInitializedAsync()
    {
        await HandleInput();
        await base.OnInitializedAsync();
    }

    private async Task HandleInput()
    {
        deThis = new();
        // thêm 1 trường null
        deThis?.Insert(0, new DeThiDto() {MaDeThi = -1, TenDeThi = "Chưa có mã đề"});
        selectDeThi = deThis?[0];
        if(IsEdit && CaThi != null){
            ten_ca_thi = CaThi.TenCaThi;
            ngay_thi = CaThi.ThoiGianBatDau;
            thoi_gian = new TimeSpan(ngay_thi.Value.Hour, ngay_thi.Value.Minute, ngay_thi.Value.Second);
            thoi_luong_thi = CaThi.ThoiGianThi;
            selectDeThi = await SelectOneDeThiAPI(CaThi.MaDeThi);
        }
    }

    private void OnClickThoat()
    {
        MudDialog?.Cancel();
    }

    private async Task OnClickThem()
    {
        if (string.IsNullOrEmpty(ten_ca_thi) || ngay_thi == null || thoi_gian == null || thoi_luong_thi == null || selectDeThi == null || MaChiTietDotThi == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        ngay_thi = new DateTime(ngay_thi.Value.Year, ngay_thi.Value.Month, ngay_thi.Value.Day, thoi_gian.Value.Hours, thoi_gian.Value.Minutes, 0);
        
        var result = await InsertCaThiAPI(new CaThiCreateRequest { 
            TenCaThi = ten_ca_thi, 
            MaChiTietDotThi = (int)MaChiTietDotThi, 
            ThoiGianBatDau = (DateTime)ngay_thi, 
            MaDeThi = selectDeThi.MaDeThi, 
            ThoiGianThi = (int)thoi_luong_thi});
        
        if (result != null && result.MaCaThi != 0)
        {
			MudDialog?.Close(DialogResult.Ok(result));
        }
    }

    private async Task OnClickSua()
    {
        if (string.IsNullOrEmpty(ten_ca_thi) || ngay_thi == null || thoi_gian == null || thoi_luong_thi == null || selectDeThi == null || MaChiTietDotThi == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        ngay_thi = new DateTime(ngay_thi.Value.Year, ngay_thi.Value.Month, ngay_thi.Value.Day, thoi_gian.Value.Hours, thoi_gian.Value.Minutes, 0);
        var result = await UpdateCaThiAPI(CaThi?.MaCaThi ?? -1, new CaThiUpdateRequest
            {
                TenCaThi = ten_ca_thi,
                MaChiTietDotThi = (int)MaChiTietDotThi,
                ThoiGianBatDau = (DateTime)ngay_thi,
                MaDeThi = selectDeThi.MaDeThi,
                ThoiGianThi = (int)thoi_luong_thi
            });
        if (result != null && result.MaCaThi != 0)
        {
            MudDialog?.Close(DialogResult.Ok(result));
        }
    }


    private async Task<CaThiDto?> InsertCaThiAPI(CaThiCreateRequest caThi){
        var response = await SenderAPI.PostAsync<CaThiDto>("api/cathis", caThi);
        return (response.Success) ? response.Data : null;
    }

    private async Task<CaThiDto?> UpdateCaThiAPI(int ma_ca_thi, CaThiUpdateRequest caThi){
        var response = await SenderAPI.PutAsync<CaThiDto>($"api/cathis/{ma_ca_thi}", caThi);
        return (response.Success) ? response.Data : null;
    }

    private async Task<DeThiDto?> SelectOneDeThiAPI(int ma_de_thi)
    {
        var response = await SenderAPI.GetAsync<DeThiDto>($"api/dethis/{ma_de_thi}");
        return (response.Success) ? response.Data : null;
    }

}
