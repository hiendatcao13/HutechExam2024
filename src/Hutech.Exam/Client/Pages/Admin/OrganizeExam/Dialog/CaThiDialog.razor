@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Custom
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 450px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs ="4"><MudText>Tên Đợt thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@TenDotThi</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Môn thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@TenMonThi</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Phòng thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@TenLopAo</span></MudText></MudItem>

            <MudItem xs="4"><MudText>Lần thi:</MudText></MudItem>
            <MudItem xs="8"><MudText><span class="title-text">@LanThi</span></MudText></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Tên Ca thi:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Label="Tên Ca thi" Required InputType="InputType.Text" @bind-Value="ten_ca_thi"></MudTextField></MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Ngày thi:</MudText></MudItem>
            <MudItem xs="8">
                <MudDatePicker Editable="true" Label="Ngày thi" @bind-Date="ngay_thi" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Dialog" />
            </MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Thời gian:</MudText></MudItem>
            <MudItem xs="8">
                <MudTimePicker Editable="true" Label="Thời gian" @bind-Time="thoi_gian" TimeFormat="HH:mm" PickerVariant="PickerVariant.Dialog" />
            </MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Mã đề:</MudText></MudItem>
            <MudItem xs="8">
                <MudSelect T="DeThiDto" @bind-Value="selectDeThi" Label="Đề thi" Required>
                    @if (deThis != null)
                    {
                        foreach (var item in deThis)
                        {
                            <MudSelectItem Value="@item">[@item.MaDeThi] @item.TenDeThi</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="4" Style="align-content: center"><MudText>Thời lượng:</MudText></MudItem>
            <MudItem xs="8"><MudTextField Required InputType="InputType.Number" @bind-Value="thoi_luong_thi"></MudTextField></MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
        @if (!IsEdit)
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Success">Thêm</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" OnClick="async () => await OnClickSua()" Color="Color.Success">Sửa</MudButton>
        }

    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }

    .mud-grid-item{
        padding-top: 5px !important;
    }
    .title-text{
        font-weight: bold;
        color: darkslateblue;
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    [Inject] public HttpClient Http { get; set; } = default!;
    [Parameter] public int? MaChiTietDotThi { get; set; }
    [Parameter] public string? TenDotThi { get; set; }
    [Parameter] public string? TenLopAo { get; set; }
    [Parameter] public string? TenMonThi { get; set; }
    [Parameter] public string? LanThi { get; set; }
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public CaThiDto? CaThi { get; set; }


    private string? ten_ca_thi;
    private DateTime? ngay_thi = DateTime.Now;
    private TimeSpan? thoi_gian = new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, 0);
    private int? thoi_luong_thi;
    private DeThiDto? selectDeThi;
    private List<DeThiDto>? deThis;


    private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";
    private const string SUCCESS_ADDCATHI = "Thêm ca thi thành công";
    private const string FAIL_ADDCATHI = "Thêm ca thi thất bại";
    private const string SUCCESS_EDITCATHI = "Sửa ca thi thành công";
    private const string FAIL_EDITCATHI = "Sửa ca thi thất bại";

    protected override async Task OnInitializedAsync()
    {
        await HandleInput();
        await base.OnInitializedAsync();
    }
    private async Task HandleInput()
    {
        deThis = await GetAllDeThiAPI();
        if(IsEdit && CaThi != null){
            ten_ca_thi = CaThi.TenCaThi;
            ngay_thi = CaThi.ThoiGianBatDau;
            thoi_gian = new TimeSpan(ngay_thi.Value.Hour, ngay_thi.Value.Minute, ngay_thi.Value.Second);
            thoi_luong_thi = CaThi.ThoiGianThi;
            selectDeThi = await SelectOneDeThiAPI(CaThi.MaDeThi);
        }
    }
    private void OnClickThoat()
    {
        MudDialog?.Cancel();
    }
    private async Task OnClickThem()
    {
        if (string.IsNullOrEmpty(ten_ca_thi) || ngay_thi == null || thoi_gian == null || thoi_luong_thi == null || selectDeThi == null || MaChiTietDotThi == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        ngay_thi = new DateTime(ngay_thi.Value.Year, ngay_thi.Value.Month, ngay_thi.Value.Day, thoi_gian.Value.Hours, thoi_gian.Value.Minutes, 0);
        var result = await InsertCaThiAPI(CreateCaThi(ten_ca_thi, (int)MaChiTietDotThi, (DateTime)ngay_thi, selectDeThi.MaDeThi, (int)thoi_luong_thi));
        if (result)
        {
            Snackbar.Add(SUCCESS_ADDCATHI, Severity.Success);
            MudDialog?.Close();
        }
        else
        {
            Snackbar.Add(FAIL_ADDCATHI, Severity.Error);
        }
    }
    private async Task OnClickSua()
    {
        if (string.IsNullOrEmpty(ten_ca_thi) || ngay_thi == null || thoi_gian == null || thoi_luong_thi == null || selectDeThi == null || MaChiTietDotThi == null)
        {
            Snackbar.Add(INVALID_FORM, Severity.Error);
            return;
        }
        ngay_thi = new DateTime(ngay_thi.Value.Year, ngay_thi.Value.Month, ngay_thi.Value.Day, thoi_gian.Value.Hours, thoi_gian.Value.Minutes, 0);
        var result = await UpdateCaThiAPI(CreateCaThi(ten_ca_thi, (int)MaChiTietDotThi, (DateTime)ngay_thi, selectDeThi.MaDeThi, (int)thoi_luong_thi));
        if (result)
        {
            Snackbar.Add(SUCCESS_EDITCATHI, Severity.Success);
            MudDialog?.Close();
        }
        else
        {
            Snackbar.Add(FAIL_EDITCATHI, Severity.Error);
        }
    }


    private async Task<bool> InsertCaThiAPI(CustomCaThi caThi){
        var json = JsonSerializer.Serialize(caThi);
        var response = await Http.PostAsync("api/CaThi/Insert", new StringContent(json, Encoding.UTF8, "application/json"));
        return response.IsSuccessStatusCode;
    }
    private async Task<bool> UpdateCaThiAPI(CustomCaThi caThi){
        var json = JsonSerializer.Serialize(caThi);
        var response = await Http.PutAsync("api/CaThi/Update", new StringContent(json, Encoding.UTF8, "application/json"));
        return response.IsSuccessStatusCode;
    }
    private async Task<DeThiDto?> SelectOneDeThiAPI(int ma_de_thi)
    {
        var response = await Http.GetAsync($"api/DeThi/SelectOne?ma_de_thi={ma_de_thi}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<DeThiDto?>();
        }
        return null;
    }
    private async Task<List<DeThiDto>?> GetAllDeThiAPI(){
        var response = await Http.GetAsync("api/DeThi/GetAll");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<DeThiDto>?>();
        }
        return null;
    }
    private CustomCaThi CreateCaThi(string ten_ca_thi, int ma_chi_tiet_dot_thi, DateTime thoi_gian_bat_dau, int? ma_de_hv, int thoi_luong_thi)
    {
        //(caThi.TenCaThi ?? "", caThi.MaChiTietDotThi, caThi.ThoiGianBatDau, caThi.MaDeThi, caThi.ThoiGianThi);
        return new CustomCaThi
            {
                MaCaThi = CaThi?.MaCaThi ?? -1,
                TenCaThi = ten_ca_thi,
                MaChiTietDotThi = ma_chi_tiet_dot_thi,
                ThoiGianBatDau = thoi_gian_bat_dau,
                MaDeThi = ma_de_hv ?? -1,
                ThoiGianThi = thoi_luong_thi,
            };
    }
}
