@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Request.MonHoc
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 500px; max-height: auto; overflow: visible">
	<DialogContent>
		<MudTextField Label="Mã số môn học" Required InputType="InputType.Text" @bind-Value="tempSubject.MaSoMonHoc" Placeholder="CMP123" />
		<MudTextField Label="Tên môn học" Required InputType="InputType.Text" @bind-Value="tempSubject.TenMonHoc" />
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" OnClick="OnClickEdit" Color="Color.Default">Thoát</MudButton>
		@if (!IsEdit)
		{
			<MudButton Variant="Variant.Filled" OnClick="async () => await OnClickAddAsync()" Color="Color.Success">Thêm</MudButton>
		}
		else
		{
			<MudButton Variant="Variant.Filled" OnClick="async () => await OnClickEditAsync()" Color="Color.Success">Sửa</MudButton>
		}

	</DialogActions>
</MudDialog>
<style>
	.my-custom-class {
	backdrop-filter: blur(10px);
	}
</style>

@code {
	[CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

	[Inject] private ISenderAPI SenderAPI { get; set; } = default!;

	[Parameter] public MonHocDto? Subject { get; set; }

	[Parameter] public bool IsEdit { get; set; } = false;

	private MonHocDto tempSubject = default!;

	private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";

	protected override async Task OnInitializedAsync()
	{
		HandleInput();
		await base.OnInitializedAsync();
	}

	private void HandleInput()
	{
		if (Subject != null && IsEdit)
		{
			tempSubject = new MonHocDto(Subject);
			return;
		}
		tempSubject = new();
	}

	private void OnClickEdit()
	{
		MudDialog?.Cancel();
	}

	private async Task OnClickAddAsync()
	{
		if (string.IsNullOrEmpty(tempSubject.MaSoMonHoc) || string.IsNullOrEmpty(tempSubject.TenMonHoc))
		{
			Snackbar.Add(INVALID_FORM, Severity.Error);
			return;
		}
		var result = await InsertAPI(new MonHocCreateRequest
			{
				MaSoMonHoc = tempSubject.MaSoMonHoc,
				TenMonHoc = tempSubject.TenMonHoc
			});

		if(result != null && result.MaMonHoc != 0)
		{
			MudDialog?.Close(DialogResult.Ok(result));
		}
	}

	private async Task OnClickEditAsync()
	{
		if (string.IsNullOrEmpty(tempSubject.MaSoMonHoc) || string.IsNullOrEmpty(tempSubject.TenMonHoc))
		{
			Snackbar.Add(INVALID_FORM, Severity.Error);
			return;
		}
		var result = await UpdateAPI(Subject?.MaMonHoc ?? -1, new MonHocUpdateRequest
			{
				MaSoMonHoc = tempSubject.MaSoMonHoc,
				TenMonHoc = tempSubject.TenMonHoc
			});

		if (result != null && result.MaMonHoc != 0)
		{
			MudDialog?.Close(DialogResult.Ok(result));
		}
	}

	private async Task<MonHocDto?> InsertAPI(MonHocCreateRequest monHoc)
	{
		var response = await SenderAPI.PostAsync<MonHocDto>("api/monhocs", monHoc);
		return (response.Success) ? response.Data : null;
		
	}
	private async Task<MonHocDto?> UpdateAPI(int ma_mon_hoc, MonHocUpdateRequest monHoc)
	{
		var response = await SenderAPI.PutAsync<MonHocDto>($"api/monhocs/{ma_mon_hoc}", monHoc);
		return (response.Success) ? response.Data : null;
		
	}
}
