@using Hutech.Exam.Client.API
@using Hutech.Exam.Client.Components.Dialogs
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 500px; max-height: auto; overflow: visible">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText>@((MarkupString)(MESSAGE))</MudText>
            </MudItem>

            <MudItem xs="12">
                <MudTextField Label="SL kí tự quy định MSSV" Style="width:200px" @bind-Value="totalStudentCodeNumber" Typo="Typo.body2" Color="Color.Default" InputType="InputType.Number" HelperText="không check vui lòng để -1" />
            </MudItem>

            <MudItem xs="6" Style="padding-top: 10px">
                <MudCheckBox @bind-Value="isExamCodeFullNumber">MSSV phải là số</MudCheckBox>
            </MudItem>

            <MudItem xs="6" Style="padding-top: 10px">
                <MudCheckBox @bind-Value="isExamCodeIgnoreExist">Bỏ qua MSSV đã tồn tại</MudCheckBox>
            </MudItem>

            <MudItem xs="12">
                <Microsoft.AspNetCore.Components.Forms.InputFile class="form-control-sm w-70" OnChange="HandleFileUploadAsync" accept=".xls,.xlsx">
                </Microsoft.AspNetCore.Components.Forms.InputFile>
            </MudItem>
        </MudGrid>
        <MudText Color="Color.Warning" Typo="Typo.subtitle2">@NOTE</MudText>
        <MudText Color="Color.Success">Số dòng được ghi nhận: @totalRecords</MudText>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="OnClickExit" Color="Color.Default">Thoát</MudButton>
        @if (isReadyToSave)
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="async() => await OnClickSaveAsync()">Lưu</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Success" Disabled>Lưu</MudButton>
        }
    </DialogActions>
</MudDialog>
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }

</style>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Inject] private ISenderAPI SenderAPI { get; set; } = default!;

    [Parameter][EditorRequired] public LopDto ClassRoom { get; set; } = default!; // lớp hiện tại để thêm sinh viên vào

    [Parameter] public List<SinhVienDto>? ExistStudents { get; set; } = default!; // danh sách sinh viên đã tồn tại trong lớp, dùng để kiểm tra trùng lặp MSSV

    int totalRecords = 0; // số dòng được ghi nhận

    bool isReadyToSave = false;

    Dictionary<string, SinhVienDto> students = [];

    Dictionary<string, SinhVienDto> existStudents = []; // Từ điển để kiểm tra MSSV đã tồn tại trong lớp

    //mssv
    int totalStudentCodeNumber = -1; // tổng số kí tự MSSV
    bool isExamCodeFullNumber = false; // chỉ chứa toàn số
    bool isExamCodeIgnoreExist = false; // tự động bỏ qua MSSV đã tồn tại trong danh sách sinh viên của lớp


    const string MESSAGE = "Bảng sheet theo trình tự: <b style='color:red;'>[MSSV], [HoLot?], [Ten], [GioiTinh] 0(Nam)/1(Nữ) [NgaySinh?], [DiaChi?], [Email?], [DienThoai?]/b>";
    const string NOTE = "Lưu ý: File excel phải có thể có hoặc không có tiêu đề HEADING, dữ liệu đọc bắt đầu từ ô A2 tại sheet 1. \nFile tối đa 5MB. MSSV, tên và giới tính bắt buộc không được rỗng hoặc MSSV trùng lặp.";
    const string NOT_FORMAT_EXCEL = "Định dạng file không phải Excel hoặc file rỗng";
    const string WAITING_MESSAGE = "Hệ thống sẽ mất ít thời gian để hoàn thành. Vui lòng chờ";
    const string NO_SINHVIEN = "Không có sinh viên nào được ghi nhận. Vui lòng kiểm tra lại file Excel hoặc điền thông tin sinh viên bằng tay.";
    const string NO_ERROR = "Hệ thống đã ghi nhận toàn bộ thông tin. Sẵn sàng để lưu";


    private void OnClickExit()
    {
        MudDialog?.Cancel();
    }
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        isReadyToSave = false;
        students.Clear();

        Snackbar.Add(WAITING_MESSAGE, Severity.Info);

        var file = e.File;
        if (file is null || !(file.ContentType == "application/vnd.ms-excel" || file.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") ||
            !(file.Name.EndsWith(".xls", StringComparison.OrdinalIgnoreCase) || file.Name.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase)))
        {
            Snackbar.Add(NOT_FORMAT_EXCEL, Severity.Error);
            return;
        }

        using var memoryStream = new MemoryStream();
        await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(memoryStream); // 5 MB
        memoryStream.Position = 0;

        ExcelPackage.License.SetNonCommercialPersonal("Pino Dat");
        using var package = new ExcelPackage(memoryStream);
        var worksheet = package.Workbook.Worksheets[0]; // Lấy sheet đầu tiên
        var rowCount = worksheet.Dimension.End.Row;       // Số dòng

        totalRecords = rowCount - 1; // Bỏ qua dòng tiêu đề

        for (int row = 2; row <= rowCount; row++) // Bỏ qua dòng tiêu đề
        {
            var gioiTinhText = worksheet.Cells[row, 4].Text?.Trim();


            SinhVienDto sinhVien = new SinhVienDto
                {
                    MaSoSinhVien = NormalizeString(worksheet.Cells[row, 1].Text),
                    HoVaTenLot = NormalizeString(worksheet.Cells[row, 2].Text),
                    TenSinhVien = NormalizeString(worksheet.Cells[row, 3].Text),
                    GioiTinh = (!string.IsNullOrEmpty(gioiTinhText) && (gioiTinhText == "1" || gioiTinhText == "0")) ? short.Parse(gioiTinhText) : null,
                    NgaySinh = DateTime.TryParse(worksheet.Cells[row, 4].Text?.Trim(), out DateTime ngaySinh) ? ngaySinh : null,
                    DiaChi = NormalizeString(worksheet.Cells[row, 5].Text),
                    Email = NormalizeString(worksheet.Cells[row, 6].Text),
                    DienThoai = NormalizeString(worksheet.Cells[row, 7].Text),
                    MaLop = ClassRoom.MaLop,
                };


            if (!ValidateData(row, sinhVien))
            {
                isReadyToSave = false;
                return;
            }

            students[sinhVien.MaSoSinhVien + ""] = sinhVien; // Lưu sinh viên vào từ điển

        }

        if (students.Count == 0)
        {
            Snackbar.Add(NO_SINHVIEN, Severity.Warning);
            isReadyToSave = false;
            return;
        }

        Snackbar.Add(NO_ERROR, Severity.Success);
        isReadyToSave = true;
        return;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Chuyển danh sách sinh viên đã tồn tại thành từ điển để kiểm tra trùng lặp MSSV
            existStudents = ExistStudents?.ToDictionary(sv => sv.MaSoSinhVien + "", sv => sv) ?? [];
        }
    }

    private bool ValidateData(int row, SinhVienDto sinhVien)
    {
        //Kiểm tra nếu MSSV rỗng
        if (string.IsNullOrEmpty(sinhVien.MaSoSinhVien))
        {
            Snackbar.Add($"Dòng {row}: MSSV bị trống. Vui lòng kiểm tra");
            return false;
        }

        //Kiểm tra độ dài của MSSV
        if (totalStudentCodeNumber != -1 && totalStudentCodeNumber != sinhVien.MaSoSinhVien.Length)
        {
            Snackbar.Add($"Dòng {row}: MSSV phải có độ dài {totalStudentCodeNumber} ký tự. Vui lòng kiểm tra");
            return false;
        }

        //Kiểm tra nếu MSSV chỉ chứa toàn số
        if (isExamCodeFullNumber == true && !HasAllNumberMSSV(sinhVien.MaSoSinhVien))
        {
            Snackbar.Add($"Dòng {row}: MSSV phải chỉ chứa toàn số. Vui lòng kiểm tra");
            return false;
        }

        // Kiểm tra nếu MSSV bị lặp
        if (students.ContainsKey(sinhVien.MaSoSinhVien))
        {
            Snackbar.Add($"Dòng {row}: MSSV {sinhVien.MaSoSinhVien} bị trùng lắp. Vui lòng kiểm tra bằng Ctrl + F trong file Excel");
            return false;
        }

        //Kiểm tra tên không được rỗng
        if (string.IsNullOrEmpty(sinhVien.TenSinhVien))
        {
            Snackbar.Add($"Dòng {row}: Tên thí sinh bị trống. Vui lòng kiểm tra");
            return false;
        }

        //kiểm tra tên có chứa ký tự đặc biệt hoặc số
        if (!HasOnlyLetter(sinhVien.TenSinhVien) || !HasOnlyLetter(sinhVien.HoVaTenLot + ""))
        {
            Snackbar.Add($"Dòng {row}: Tên hoặc họ lót thí sinh có chứa kí tự đặc biệt hoặc có số. Vui lòng kiểm tra");
            return false;
        }

        if (sinhVien.GioiTinh == null)
        {
            Snackbar.Add($"Dòng {row}: Giới tính bị trống. Vui lòng kiểm tra");
            return false;
        }

        //Kiểm tra email nếu có
        if (!string.IsNullOrEmpty(sinhVien.Email) && !IsValidEmail(sinhVien.Email))
        {
            Snackbar.Add($"Dòng {row}: Email {sinhVien.Email} không hợp lệ. Vui lòng kiểm tra");
            return false;
        }

        //Kiểm tra nếu MSSV đã tồn tại trong ds
        if (existStudents.ContainsKey(sinhVien.MaSoSinhVien))
        {
            if (isExamCodeIgnoreExist)
            {
                Snackbar.Add($"Dòng {row}: MSSV {sinhVien.MaSoSinhVien} đã tồn tại trong danh sách sinh viên của lớp được bỏ qua");
                return true;
            }

            Snackbar.Add($"Dòng {row}: MSSV {sinhVien.MaSoSinhVien} đã tồn tại trong danh sách sinh viên của lớp");
            return false;
        }

        return true;
    }

    private async Task OnClickSaveAsync()
    {
        Snackbar.Add(WAITING_MESSAGE, Severity.Info);
        if (await Insert_BatchAPI(students.Values.ToList()))
        {
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    private string? NormalizeString(string? input)
    {
        return string.IsNullOrWhiteSpace(input) ? null : input.Trim();
    }


    private bool HasQualLengthMSSV(string mssv)
    {
        if (totalStudentCodeNumber == -1)
            return true;
        return mssv.Length == totalStudentCodeNumber;
    }
    private bool HasAllNumberMSSV(string mssv)
    {
        if (isExamCodeFullNumber == false)
            return true;
        return HasOnlyNumber(mssv);
    }

    private bool HasSpecialCharacter(string text)
    {
        if (string.IsNullOrEmpty(text))
            return false;
        return Regex.IsMatch(text, @"[^a-zA-Z0-9\s]");
    }

    private bool HasOnlyNumber(string text)
    {
        return Regex.IsMatch(text, @"^\d+$");
    }

    private bool HasOnlyLetter(string text)
    {
        return Regex.IsMatch(text, @"^[a-zA-ZÀ-ỹà-ỹ\s]+$");
    }

    private bool IsValidEmail(string email)
    {
        return Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
    }


    private async Task<bool> Insert_BatchAPI(List<SinhVienDto> sinhViens)
    {
        var result = await SenderAPI.PostAsync<List<SinhVienDto>>("api/sinhviens/batch", sinhViens);
        return result.Success;
    }
}
