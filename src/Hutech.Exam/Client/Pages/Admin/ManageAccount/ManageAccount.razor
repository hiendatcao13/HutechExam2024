@page "/admin/account"
@using Hutech.Exam.Shared.DTO
@using Hutech.Exam.Shared.Enums
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@attribute [Authorize(Roles = "Admin,DaoTao")]

<PageTitle>Manage Student</PageTitle>

<MudContainer Class="d-flex justify-center align-center">
	<MudGrid Style="margin-top: 5px; margin-left: 5px">
		<MudItem xs="12">
			@if (users != null)
			{
				<MudTable Elevation="3" T="UserDto" Items="@users" Hover="true" Bordered="true" Dense="true" FixedHeader="true" Striped="true" OnRowClick="OnRowClickedUser" RowClass="cursor-pointer" RowClassFunc="SelectedRowClassUserFunc"
						  TotalItems="totalRecords_User" RowsPerPage="rowsPerPage_User" CurrentPageChanged="OnCurrentPageChange_UserAsync" RowsPerPageChanged="OnRowsPerPageChange_UserAsync">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Thông tin người dùng</MudText>
						<MudSpacer />
						<MudTextField @bind-Value="searchString" Placeholder="Nhập email hoặc tên người dùng" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" OnBlur="async () => await FilterAsync()" IconSize="Size.Medium" Class="mt-0"></MudTextField>
						<MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.Sync" OnClick="async () => await FetchUsersAsync()">Sync</MudButton>
						<MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="async () => await OnClickAddUserAsync()">Thêm</MudButton>
						<MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="async () => await OnClickEditUserAsync()">Sửa</MudButton>
						<MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Lock" OnClick="async () => await OnClickChangePassword()">Đổi mật khẩu</MudButton>
						<MudButton Class="add-button" Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="async () => await OnClickDeleteUserAsync()">Xóa</MudButton>
					</ToolBarContent>
					<HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>Email</MudTh>
						<MudTh>Vai trò</MudTh>
						<MudTh>Đăng nhập lần cuối</MudTh>
						<MudTh>Đã khóa?</MudTh>
						<MudTh>Đã xóa?</MudTh>
					</HeaderContent>
					<RowTemplate Context="item">
						<MudTd DataLabel="Name">@item.Name</MudTd>
						<MudTd DataLabel="Email">@item.Email</MudTd>
						<MudTd DataLabel="Vai trò">@item.MaRoleNavigation.TenRole</MudTd>
						<MudTd DataLabel="Đăng nhập lần cuối">@(item.LastLoginDate.HasValue == true ? @item.LastLoginDate.Value.ToString("dd/MM/yyyy") : "-")</MudTd>
						<MudTd DataLabel="Đã khóa?"><MudSwitch ReadOnly @bind-Value="item.IsLockedOut" Color="Color.Success"></MudSwitch></MudTd>
						<MudTd DataLabel="Đã xóa?"><MudSwitch ReadOnly @bind-Value="item.IsDeleted" Color="Color.Error"></MudSwitch></MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager PageSizeOptions="new int[] {20, 30, 60, 100}" AllItemsText="All" />
					</PagerContent>
				</MudTable>
			}
		</MudItem>
	</MudGrid>
</MudContainer>

<style>
	.add-button {
	transform: scale(0.85);
	margin-bottom: 2%;
	}

	.final-table-button {
	margin-top: 1%;
	}

	.checkbox {
	transform: scale(0.85);
	}

	.selected-row {
		background-color: #e0f7fa !important;
		font-weight: bold;
	}

	.my-custom-table {
		border: 1px solid #ccc !important;
		border-radius: 6px !important;
	}

		.my-custom-table .mud-table-row:hover {
			background-color: #f1f1f1 !important;
			cursor: pointer !important;
		}
</style>

@code{
	private string searchString = string.Empty;

	private UserDto? selectedUser;

	// thông số cho bảng account
	private int currentPage_User = 0;
	private int rowsPerPage_User = 20;
	private int totalRecords_User = 20;
	private int totalPages_User = 1;

	private List<int> selectedPages_User = new() { 0 }; // luôn load có trang đầu tiên

	private async Task FilterAsync()
	{
		if (!string.IsNullOrEmpty(searchString))
		{
			(users, totalPages_User, totalRecords_User) = (!roleName.Contains(KieuVaiTro.Admin.ToString()))
			? (users, totalRecords_User, totalPages_User) = await Users_GetAll_Search_Supervisor_PagedAPI(searchString, currentPage_User, rowsPerPage_User)
			: (users, totalRecords_User, totalPages_User) = await Users_GetAll_Search_PagedAPI(searchString, currentPage_User, rowsPerPage_User);
			CreateFakeData_User();
		}
		else
		{
			(users, totalPages_User, totalRecords_User) = await Users_GetAll_PagedAPI(currentPage_User, rowsPerPage_User);
			CreateFakeData_User();
		}
	}

	private async Task OnRowsPerPageChange_UserAsync(int rows)
	{
		if (rows == rowsPerPage_User)
			return;

		this.rowsPerPage_User = rows;
		currentPage_User = 0; //Reset về trang đầu tiên

		(var newUsers, _, _) = await Users_GetAll_PagedAPI(currentPage_User, rowsPerPage_User);
		PadEmptyRows(newUsers);
	}
	private async Task OnCurrentPageChange_UserAsync(int page)
	{
		if (page == currentPage_User)
			return;

		this.currentPage_User = page;
		if (selectedPages_User.Contains(page))
			return;

		//chỉ thực hiện load data khi người dùng chọn trang mới
		(var newUsers, _, _) = await Users_GetAll_PagedAPI(currentPage_User, rowsPerPage_User);
		PadEmptyRows(newUsers);
		selectedPages_User?.Add(currentPage_User);
	}

	private void OnRowClickedUser(TableRowClickEventArgs<UserDto> args)
	{
		if (args.Item == selectedUser)
			return;

		selectedUser = args.Item;
	}

	private string SelectedRowClassUserFunc(UserDto item, int rowNumber)
	{
		return item == selectedUser ? "selected-row" : string.Empty;
	}
}
