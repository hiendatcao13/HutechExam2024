@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@using Hutech.Exam.Shared.DTO.Custom
@using Hutech.Exam.Shared.DTO.Request.User
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 400px; overflow: visible">
	<DialogContent>
		<MudGrid>

			<MudItem xs="4"><MudText>LoginName:</MudText></MudItem>
			<MudItem xs="8"><MudText><span class="title-text">@tempUser.LoginName</span></MudText></MudItem>

			<MudItem xs="4"><MudText>Lần cuối đổi:</MudText></MudItem>
			<MudItem xs="8"><MudText><span class="title-text">@((tempUser.LastPasswordChangedDate == null) ? "-" : tempUser.LastPasswordChangedDate)</span></MudText></MudItem>

			<MudItem xs="4" Style="align-content: center"><MudText>Password:</MudText></MudItem>
			<MudItem xs="8"><MudTextField Label="Mật khẩu" Variant="Variant.Outlined" Required InputType="InputType.Password" @bind-Value="password" /></MudItem>

			<MudItem xs="4" Style="align-content: center"><MudText>Nhập lại password:</MudText></MudItem>
			<MudItem xs="8"><MudTextField Label="Nhập lại mật khẩu" Variant="Variant.Outlined" Required InputType="InputType.Password" @bind-Value="repassword" /></MudItem>

		</MudGrid>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" OnClick="OnClickThoat" Color="Color.Default">Thoát</MudButton>
		<MudButton Variant="Variant.Filled" OnClick="async () => await OnClickThem()" Color="Color.Info">Thêm</MudButton>

	</DialogActions>
</MudDialog>
<style>
	.my-custom-class {
	backdrop-filter: blur(10px);
	}

	.title-text {
	font-weight: bold;
	}
</style>

@code {
	[CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

	[Parameter][EditorRequired] public UserDto User { get; set; } = default!;

	[Inject] private ISenderAPI SenderAPI { get; set; } = default!;

	private UserDto tempUser = default!;

	private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";
	private const string NOT_MATCH_PASSWORD = "Mật khẩu không trùng nhau. Vui lòng kiểm tra";

	private string password = string.Empty, repassword = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		HandleInput();
		await base.OnInitializedAsync();
	}
	private void HandleInput()
	{
		tempUser = new UserDto();
	}
	private void OnClickThoat()
	{
		MudDialog?.Cancel();
	}

	private async Task OnClickThem()
	{
		if (string.IsNullOrEmpty(repassword) || tempUser.MaRole == 0)
		{
			Snackbar.Add(INVALID_FORM, Severity.Error);
			return;
		}

		if (string.Compare(password, repassword) != 0)
		{
			Snackbar.Add(NOT_MATCH_PASSWORD, Severity.Error);
			return;
		}

		var result = await UpdatePasswordAPI(User.UserId,new UserUpdatePasswordRequest
			{
				Password = password
			});

		if (result)
		{
			MudDialog?.Close(DialogResult.Ok(result));
		}
	}

	private async Task<bool> UpdatePasswordAPI(Guid userId, UserUpdatePasswordRequest user)
	{
		var response = await SenderAPI.PostAsync<bool>($"api/users/{userId}", user);
		return (response.Success);
	}
}
