@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text.RegularExpressions
@using Hutech.Exam.Client.API
@using Hutech.Exam.Shared.DTO
@using Hutech.Exam.Shared.DTO.Custom
@using Hutech.Exam.Shared.DTO.Request.User
@using Hutech.Exam.Shared.Enums
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Style="max-width: 400px; overflow: visible">
	<DialogContent>
		<MudGrid>
			<MudItem xs="4"><MudText>Vai trò:</MudText></MudItem>
			<MudItem xs="8">
				<MudSelect Disabled Label="Vai trò" T="int" @bind-Value="tempUser.MaVaiTro">
					@foreach (KieuRole kieu in Enum.GetValues(typeof(KieuRole)))
					{
						<MudSelectItem Value="@((int)kieu)">[@((int)kieu)]: @kieu</MudSelectItem>
					}
				</MudSelect>
			</MudItem>

			<MudItem xs="4"><MudText>LoginName:</MudText></MudItem>
			<MudItem xs="8"><MudText><span class="title-text">@tempUser.TenDangNhap</span></MudText></MudItem>

			<MudItem xs="4" Style="align-content: center"><MudText>Email:</MudText></MudItem>
			<MudItem xs="8"><MudTextField Label="Email" Required InputType="InputType.Email" @bind-Value="tempUser.Email" Placeholder="example@mail.com" /></MudItem>

			<MudItem xs="4" Style="align-content: center"><MudText>Name:</MudText></MudItem>
			<MudItem xs="8"><MudTextField Label="Name" Variant="Variant.Outlined" Required InputType="InputType.Text" @bind-Value="tempUser.Ten" /></MudItem>

			<MudItem xs="4" Style="align-content: center"><MudText>Đã khóa?:</MudText></MudItem>
			<MudItem xs="8"><MudSwitch @bind-Value="tempUser.DaKhoa" Color="Color.Info"></MudSwitch></MudItem>

			<MudItem xs="4" Style="align-content: center"><MudText>Đã xóa?:</MudText></MudItem>
			<MudItem xs="8"><MudSwitch @bind-Value="tempUser.DaXoa" Color="Color.Error"></MudSwitch></MudItem>

		</MudGrid>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" OnClick="OnClickEdit" Color="Color.Default">Thoát</MudButton>
		<MudButton Variant="Variant.Filled" OnClick="async () => await OnClickEditAsync()" Color="Color.Success">Sửa</MudButton>

	</DialogActions>
</MudDialog>
<style>
	.my-custom-class {
	backdrop-filter: blur(10px);
	}

	.title-text {
	font-weight: bold;
	}
</style>

@code {
	[CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

	[Inject] private ISenderAPI SenderAPI { get; set; } = default!;

	[Parameter][EditorRequired] public UserDto User { get; set; } = default!;

	private UserDto tempUser = default!;

	private const string INVALID_FORM = "Vui lòng nhập đầy đủ thông tin";
	private const string INVALID_EMAIL = "Email không hợp lệ. Vui lòng kiểm tra";

	protected override async Task OnInitializedAsync()
	{
		HandleInput();
		await base.OnInitializedAsync();
	}
	private void HandleInput()
	{
		tempUser = new UserDto(User);
	}
	private void OnClickEdit()
	{
		MudDialog?.Cancel();
	}

	private async Task OnClickEditAsync()
	{
		if (string.IsNullOrEmpty(tempUser.Email) || string.IsNullOrEmpty(tempUser.Ten))
		{
			Snackbar.Add(INVALID_FORM, Severity.Error);
			return;
		}

		if (!ValidateEmail(tempUser.Email))
		{
			Snackbar.Add(INVALID_EMAIL, Severity.Error);
			return;
		}

		var result = await UpdateUserAPI(tempUser.MaNguoiDung, new UserUpdateRequest
		{
			MaRole = tempUser.MaVaiTro,
			LoginName = tempUser.TenDangNhap,
			Email = tempUser.Email,
			Name = tempUser.Ten, 
			IsDeleted = tempUser.DaXoa,
			IsLockedOut = tempUser.DaKhoa,
			Comment = string.Empty
		});

		if (result != null && !string.IsNullOrEmpty(result.TenDangNhap))
		{
			MudDialog?.Close(DialogResult.Ok(result));
		}
	}

	private bool ValidateEmail(string email)
	{
		return Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
	}

	private async Task<UserDto?> UpdateUserAPI(Guid userId, UserUpdateRequest user)
	{
		var response = await SenderAPI.PutAsync<UserDto>($"api/users/{userId}", user);
		return (response.Success) ? response.Data : null;
	}
}
