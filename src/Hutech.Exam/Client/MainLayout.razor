@using Hutech.Exam.Client.Authentication
@using Hutech.Exam.Client.Components.Dialogs
@using System.Security.Claims
@using System.Net.Http.Headers
@using Hutech.Exam.Client.DAL
@using Hutech.Exam.Shared.Enums
@inherits LayoutComponentBase
@inject IDialogService Dialog
@{
	var currentPath = new Uri(Nav.Uri).AbsolutePath;
	var isAdmin = currentPath.Contains("admin/");
}
<!--Hoạt động của ErrorBoundary như try catch-->
<MudLayout>
	@if (isAdmin)
	{

		<MudAppBar Elevation="14" Dense="true" Style="background-color: cornflowerblue">
			<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
			<MudText Typo="Typo.h6">@tittle</MudText>
			<MudSpacer />
			<MudText Typo="Typo.body1" Style="margin-right: 2%">Xin chào, @name</MudText>
			<MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Small" StartIcon="@Icons.Material.Filled.Logout" Color="Color.Error" OnClick="onClickDangXuat">Đăng xuất</MudButton>
			@* <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor" Target="_blank" /> *@
		</MudAppBar>
		<MudDrawer @bind-Open="@_open" Elevation="1" Variant="@DrawerVariant.Persistent">
			<MudDrawerHeader>
				<MudText Typo="Typo.h6">Thanh quản lý</MudText>
			</MudDrawerHeader>
			<MudNavMenu>
				<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" OnClick="() => RoutingPage(0)">@names.ElementAt(0).Value</MudNavLink>
				<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DesktopMac" OnClick="() => RoutingPage(1)">@names.ElementAt(1).Value</MudNavLink>
				@if (!roleName.Contains(KieuVaiTro.GiamThi.ToString()))
				{
					<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.CoPresent" OnClick="() => RoutingPage(2)">@names.ElementAt(2).Value</MudNavLink>
					<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.BarChart" OnClick="() => RoutingPage(5)">@names.ElementAt(5).Value</MudNavLink>
				}
				@if (roleName.Contains(KieuVaiTro.Admin.ToString()) || roleName.Contains(KieuVaiTro.KhaoThi.ToString()))
				{
					<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DocumentScanner" OnClick="() => RoutingPage(3)">@names.ElementAt(3).Value</MudNavLink>
				}
				@if (roleName.Contains(KieuVaiTro.Admin.ToString()) || roleName.Contains(KieuVaiTro.DaoTao.ToString()))
				{
					<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.PeopleAlt" OnClick="() => RoutingPage(4)">@names.ElementAt(4).Value</MudNavLink>
					<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ManageAccounts" OnClick="() => RoutingPage(6)">@names.ElementAt(6).Value</MudNavLink>
				}
				@if (roleName.Contains(KieuVaiTro.Admin.ToString()))
				{
					<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.HealthAndSafety" OnClick="() => RoutingPage(7)">@names.ElementAt(7).Value</MudNavLink>
				}

			</MudNavMenu>
		</MudDrawer>
	}
	<MudMainContent Style="overflow:auto; height:100vh; padding-bottom: 20px">
		<ErrorBoundary @ref=_errorBoundary Context="errorContent">
			<ChildContent>
				<MainLayoutConent>
					@Body
				</MainLayoutConent>
			</ChildContent>
			<ErrorContent>
				<MainLayoutConent>
					@Body
				</MainLayoutConent>
				<ErrorBoundaryContent OnHandle="ResetErrorBoundary" Error="errorContent"></ErrorBoundaryContent>
			</ErrorContent>
		</ErrorBoundary>
	</MudMainContent>

</MudLayout>

@code {
	private ErrorBoundary? _errorBoundary;
	// Hiển thị alert báo lỗi -> click ok -> refresh lại page
	private void ResetErrorBoundary() => _errorBoundary?.Recover();

	[Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

	[Inject] private Blazored.SessionStorage.ISessionStorageService SessionStorage { get; set; } = default!;

	[Inject] private NavigationManager Nav { get; set; } = default!;

	[CascadingParameter] Task<AuthenticationState>? AuthenticationState { get; set; }

	private string tittle = "Trang chủ";
	private string name = "";
	private bool _open = false;
	private const string LOGOUT_MESSAGE = "Bạn có chắc chắn muốn đăng xuất?";
	private string roleName = "";

	private Dictionary<string, string> names = new Dictionary<string, string>
	{
		{ "/admin/home", "Trang chủ" }, //0
		{ "/admin/control", "Quản lý ca thi" }, //1
		{ "/admin/organize", "Tổ chức kì thi" }, //2
		{ "/admin/question", "Tổ chức đề thi" }, //3
		{ "/admin/classroom", "Quản lý lớp học"}, //4
		{ "/admin/test-review", "Đánh giá đề thi" }, //5
		{ "/admin/account", "Quản lý tài khoản" }, //6
		{ "/admin/system", "Kiểm tra sức khỏe"}, //7

		// 1 số trang phụ
		{"/admin/approved-exam", "Gán đề thi"},
		{"/admin/monitor", "Giám sát ca thi" }
	};

	private void ToggleDrawer()
	{
		_open = !_open;
	}

	protected override async Task OnInitializedAsync()
	{
		await GetIdentityRoleName();

		// Gán tiêu đề ngay lần đầu load
		UpdateTitle(Nav.Uri);

		// Đăng ký lắng nghe sự kiện điều hướng
		Nav.LocationChanged += OnLocationChanged;

		await base.OnInitializedAsync();
	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		UpdateTitle(e.Location);
		StateHasChanged();
	}

	private void UpdateTitle(string fullUri)
	{
		var path = new Uri(fullUri).AbsolutePath; // Chỉ lấy phần Path, bỏ qua query string

		// Tìm key phù hợp trong từ điển names
		var match = names.FirstOrDefault(kv => path.Equals(kv.Key, StringComparison.OrdinalIgnoreCase));
		tittle = !string.IsNullOrWhiteSpace(match.Key) ? match.Value : "Trang chủ";
	}

	private async Task onClickDangXuat()
	{
		var parameters = new DialogParameters<Simple_Dialog>
			{
				{ x => x.ContentText, LOGOUT_MESSAGE },
				{ x => x.ButtonText, "Logout" },
				{ x => x.Color, Color.Error },
				{ x => x.onHandleSubmit, EventCallback.Factory.Create(this, handleDangXuat)   }
			};

		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };

		await Dialog.ShowAsync<Simple_Dialog>("Đăng xuất", parameters, options);
	}

	private async Task handleDangXuat()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(null);
		Nav?.NavigateTo("/admin", true);

	}

	private void RoutingPage(int index)
	{
		var path = names.ElementAt(index).Key;
		Nav.NavigateTo(path);
	}

	private async Task GetIdentityRoleName()
	{
		var authState = AuthenticationState != null ? await AuthenticationState : null;
		if (authState != null && authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
		{
			foreach (var claim in authState.User.Claims)
			{
				if (claim.Type == ClaimTypes.Role)
				{
					roleName += claim.Value + ",";
				}
			}

			name = authState.User.FindFirst(ClaimTypes.Name)?.Value ?? "Người dùng";
		}
	}
}



