@using Hutech.Exam.Client.Authentication
@using Hutech.Exam.Client.Components.Dialogs
@using System.Security.Claims
@using System.Net.Http.Headers
@using Hutech.Exam.Client.DAL
@inherits LayoutComponentBase
@inject NavigationManager navManager
@inject IDialogService Dialog
@{
    var currentPath = new Uri(navManager.Uri).AbsolutePath;
    var isAdmin = currentPath.Contains("admin/");
}
<!--Hoạt động của ErrorBoundary như try catch-->
<MudLayout>
    @if (isAdmin)
    {
        <MudAppBar Elevation="14" Dense="true" Style="background-color: cadetblue">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
            <MudText Typo="Typo.h6">@tittle</MudText>
            <MudSpacer />
            <MudText Typo="Typo.body1" Style="margin-right: 2%">Xin chào, @name</MudText>
            <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Logout" Color="Color.Error" OnClick="onClickDangXuat">Đăng xuất</MudButton>
            @* <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor" Target="_blank" /> *@
        </MudAppBar>
        <MudDrawer @bind-Open="@_open" Elevation="1" Variant="@DrawerVariant.Responsive">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Thanh quản lý</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" OnClick="() => SetTitle(0)">@name_of_pages[0]</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Badge" OnClick="() => SetTitle(1)">@name_of_pages[1]</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.CoPresent" OnClick="() => SetTitle(2)">@name_of_pages[2]</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DesktopMac" OnClick="() => SetTitle(3)">@name_of_pages[3]</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
    }
    <ErrorBoundary @ref=_errorBoundary Context="errorContent">
        <ChildContent>
            <MainLayoutConent>
                @Body
            </MainLayoutConent>
        </ChildContent>
        <ErrorContent>
            <MainLayoutConent>
                @Body
            </MainLayoutConent>
            <ErrorBoundaryContent OnHandle="ResetErrorBoundary" Error="errorContent"></ErrorBoundaryContent>
        </ErrorContent>
    </ErrorBoundary>
</MudLayout>

@code {
    private ErrorBoundary? _errorBoundary;
    // Hiển thị alert báo lỗi -> click ok -> refresh lại page
    private void ResetErrorBoundary() => _errorBoundary?.Recover();
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] private Blazored.SessionStorage.ISessionStorageService SessionStorage { get; set; } = default!;

    private string tittle = "Trang chủ";
    private string name = "";
    private bool _open = false;
    private const string LOGOUT_MESSAGE = "Bạn có chắc chắn muốn đăng xuất?";
    private readonly string[] name_of_pages = { "Trang chủ", "Quản lý kì thi", "Quản lý phòng thi", "Giám sát" };
    private void ToggleDrawer()
    {
        _open = !_open;
    }
    protected override async Task OnInitializedAsync()
    {
        name = await SessionStorage.GetItemAsStringAsync("Name");
        await base.OnInitializedAsync();
    }
    private async Task onClickDangXuat()
    {
        var parameters = new DialogParameters<Simple_Dialog>
            {
                { x => x.ContentText, LOGOUT_MESSAGE },
                { x => x.ButtonText, "Logout" },
                { x => x.Color, Color.Error },
                { x => x.onHandleSubmit, EventCallback.Factory.Create(this, handleDangXuat)   }
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };

        await Dialog.ShowAsync<Simple_Dialog>("Đăng xuất", parameters, options);
    }
    private async Task handleDangXuat()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager?.NavigateTo("/admin", true);

    }
    private void SetTitle(int index)
    {
        tittle = name_of_pages[index];
    }
}



